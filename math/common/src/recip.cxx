
// COPYRIGHT_BEGIN
//
// The MIT License (MIT)
//
// Copyright (c) 2015-2020 Wizzer Works
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//  For information concerning this source file, contact Mark S. Millard,
//  of Wizzer Works at msm@wizzerworks.com.
//
//  More information concerning Wizzer Works may be found at
//
//      http://www.wizzerworks.com
//
// COPYRIGHT_END

#if defined(WRITE_LUT) || defined(TEST_RECIP) || defined(TEST_RECIP_TABLE)
// Make sure we do it with the fixed point flag on so that 
// mlScalarGetValue() returns a long.

#undef ML_FIXED_POINT
#define ML_FIXED_POINT 1
#endif

#include "mle/mlAssert.h"
#include "math/scalar.h"

#define INDEX_NBITS 11
#define INDEX_MASK 0x3ff80000
#define INDEX_SHIFT 19

#define HIGH_MASK_A 0xf8000000
#define HIGH_SHIFT_A 4
#define HIGH_MASK_B 0xc0000000
#define HIGH_SHIFT_B 1

//------------------------------------------------------------------------
// Only do this if we\'re compiled in fixed point mode.  Otherwise 
// don\'t build any of these functions.

#if ML_FIXED_POINT

#ifdef WRITE_LUT
static unsigned long recipLUT[] = { 1,2,3,4 };

#else  /* WRITE_LUT */

#if ML_FIXED_RADIX == 16
static unsigned long recipLUT[] = { 
    0x10000, 0xffe0, 0xffc0, 0xffa0, 0xff80, 0xff60, 0xff40, 0xff20, 
    0xff00, 0xfee1, 0xfec1, 0xfea1, 0xfe82, 0xfe62, 0xfe43, 0xfe23, 
    0xfe03, 0xfde4, 0xfdc5, 0xfda5, 0xfd86, 0xfd66, 0xfd47, 0xfd28, 
    0xfd08, 0xfce9, 0xfcca, 0xfcab, 0xfc8c, 0xfc6c, 0xfc4d, 0xfc2e, 
    0xfc0f, 0xfbf0, 0xfbd1, 0xfbb2, 0xfb93, 0xfb75, 0xfb56, 0xfb37, 
    0xfb18, 0xfaf9, 0xfadb, 0xfabc, 0xfa9d, 0xfa7e, 0xfa60, 0xfa41, 
    0xfa23, 0xfa04, 0xf9e6, 0xf9c7, 0xf9a9, 0xf98a, 0xf96c, 0xf94e, 
    0xf92f, 0xf911, 0xf8f3, 0xf8d4, 0xf8b6, 0xf898, 0xf87a, 0xf85c, 
    0xf83e, 0xf81f, 0xf801, 0xf7e3, 0xf7c5, 0xf7a7, 0xf78a, 0xf76c, 
    0xf74e, 0xf730, 0xf712, 0xf6f4, 0xf6d7, 0xf6b9, 0xf69b, 0xf67d, 
    0xf660, 0xf642, 0xf625, 0xf607, 0xf5e9, 0xf5cc, 0xf5ae, 0xf591, 
    0xf574, 0xf556, 0xf539, 0xf51b, 0xf4fe, 0xf4e1, 0xf4c4, 0xf4a6, 
    0xf489, 0xf46c, 0xf44f, 0xf432, 0xf414, 0xf3f7, 0xf3da, 0xf3bd, 
    0xf3a0, 0xf383, 0xf366, 0xf34a, 0xf32d, 0xf310, 0xf2f3, 0xf2d6, 
    0xf2b9, 0xf29d, 0xf280, 0xf263, 0xf246, 0xf22a, 0xf20d, 0xf1f1, 
    0xf1d4, 0xf1b8, 0xf19b, 0xf17e, 0xf162, 0xf146, 0xf129, 0xf10d, 
    0xf0f0, 0xf0d4, 0xf0b8, 0xf09c, 0xf07f, 0xf063, 0xf047, 0xf02b, 
    0xf00f, 0xeff2, 0xefd6, 0xefba, 0xef9e, 0xef82, 0xef66, 0xef4a, 
    0xef2e, 0xef12, 0xeef6, 0xeedb, 0xeebf, 0xeea3, 0xee87, 0xee6b, 
    0xee50, 0xee34, 0xee18, 0xedfc, 0xede1, 0xedc5, 0xedaa, 0xed8e, 
    0xed73, 0xed57, 0xed3c, 0xed20, 0xed05, 0xece9, 0xecce, 0xecb2, 
    0xec97, 0xec7c, 0xec60, 0xec45, 0xec2a, 0xec0f, 0xebf4, 0xebd8, 
    0xebbd, 0xeba2, 0xeb87, 0xeb6c, 0xeb51, 0xeb36, 0xeb1b, 0xeb00, 
    0xeae5, 0xeaca, 0xeaaf, 0xea94, 0xea79, 0xea5e, 0xea44, 0xea29, 
    0xea0e, 0xe9f3, 0xe9d9, 0xe9be, 0xe9a3, 0xe989, 0xe96e, 0xe953, 
    0xe939, 0xe91e, 0xe904, 0xe8e9, 0xe8cf, 0xe8b4, 0xe89a, 0xe880, 
    0xe865, 0xe84b, 0xe830, 0xe816, 0xe7fc, 0xe7e2, 0xe7c7, 0xe7ad, 
    0xe793, 0xe779, 0xe75f, 0xe744, 0xe72a, 0xe710, 0xe6f6, 0xe6dc, 
    0xe6c2, 0xe6a8, 0xe68e, 0xe674, 0xe65a, 0xe640, 0xe627, 0xe60d, 
    0xe5f3, 0xe5d9, 0xe5bf, 0xe5a6, 0xe58c, 0xe572, 0xe558, 0xe53f, 
    0xe525, 0xe50b, 0xe4f2, 0xe4d8, 0xe4bf, 0xe4a5, 0xe48c, 0xe472, 
    0xe459, 0xe43f, 0xe426, 0xe40c, 0xe3f3, 0xe3da, 0xe3c0, 0xe3a7, 
    0xe38e, 0xe374, 0xe35b, 0xe342, 0xe329, 0xe310, 0xe2f6, 0xe2dd, 
    0xe2c4, 0xe2ab, 0xe292, 0xe279, 0xe260, 0xe247, 0xe22e, 0xe215, 
    0xe1fc, 0xe1e3, 0xe1ca, 0xe1b1, 0xe198, 0xe180, 0xe167, 0xe14e, 
    0xe135, 0xe11c, 0xe104, 0xe0eb, 0xe0d2, 0xe0ba, 0xe0a1, 0xe088, 
    0xe070, 0xe057, 0xe03f, 0xe026, 0xe00e, 0xdff5, 0xdfdd, 0xdfc4, 
    0xdfac, 0xdf93, 0xdf7b, 0xdf62, 0xdf4a, 0xdf32, 0xdf19, 0xdf01, 
    0xdee9, 0xded1, 0xdeb8, 0xdea0, 0xde88, 0xde70, 0xde58, 0xde40, 
    0xde27, 0xde0f, 0xddf7, 0xdddf, 0xddc7, 0xddaf, 0xdd97, 0xdd7f, 
    0xdd67, 0xdd4f, 0xdd37, 0xdd20, 0xdd08, 0xdcf0, 0xdcd8, 0xdcc0, 
    0xdca8, 0xdc91, 0xdc79, 0xdc61, 0xdc4a, 0xdc32, 0xdc1a, 0xdc03, 
    0xdbeb, 0xdbd3, 0xdbbc, 0xdba4, 0xdb8d, 0xdb75, 0xdb5e, 0xdb46, 
    0xdb2f, 0xdb17, 0xdb00, 0xdae8, 0xdad1, 0xdaba, 0xdaa2, 0xda8b, 
    0xda74, 0xda5c, 0xda45, 0xda2e, 0xda17, 0xd9ff, 0xd9e8, 0xd9d1, 
    0xd9ba, 0xd9a3, 0xd98c, 0xd974, 0xd95d, 0xd946, 0xd92f, 0xd918, 
    0xd901, 0xd8ea, 0xd8d3, 0xd8bc, 0xd8a5, 0xd88e, 0xd878, 0xd861, 
    0xd84a, 0xd833, 0xd81c, 0xd805, 0xd7ef, 0xd7d8, 0xd7c1, 0xd7aa, 
    0xd794, 0xd77d, 0xd766, 0xd750, 0xd739, 0xd722, 0xd70c, 0xd6f5, 
    0xd6df, 0xd6c8, 0xd6b2, 0xd69b, 0xd685, 0xd66e, 0xd658, 0xd641, 
    0xd62b, 0xd615, 0xd5fe, 0xd5e8, 0xd5d2, 0xd5bb, 0xd5a5, 0xd58f, 
    0xd578, 0xd562, 0xd54c, 0xd536, 0xd520, 0xd509, 0xd4f3, 0xd4dd, 
    0xd4c7, 0xd4b1, 0xd49b, 0xd485, 0xd46f, 0xd459, 0xd443, 0xd42d, 
    0xd417, 0xd401, 0xd3eb, 0xd3d5, 0xd3bf, 0xd3a9, 0xd393, 0xd37d, 
    0xd368, 0xd352, 0xd33c, 0xd326, 0xd310, 0xd2fb, 0xd2e5, 0xd2cf, 
    0xd2ba, 0xd2a4, 0xd28e, 0xd279, 0xd263, 0xd24d, 0xd238, 0xd222, 
    0xd20d, 0xd1f7, 0xd1e2, 0xd1cc, 0xd1b7, 0xd1a1, 0xd18c, 0xd176, 
    0xd161, 0xd14b, 0xd136, 0xd121, 0xd10b, 0xd0f6, 0xd0e1, 0xd0cb, 
    0xd0b6, 0xd0a1, 0xd08c, 0xd076, 0xd061, 0xd04c, 0xd037, 0xd022, 
    0xd00d, 0xcff7, 0xcfe2, 0xcfcd, 0xcfb8, 0xcfa3, 0xcf8e, 0xcf79, 
    0xcf64, 0xcf4f, 0xcf3a, 0xcf25, 0xcf10, 0xcefb, 0xcee6, 0xced1, 
    0xcebc, 0xcea8, 0xce93, 0xce7e, 0xce69, 0xce54, 0xce40, 0xce2b, 
    0xce16, 0xce01, 0xcded, 0xcdd8, 0xcdc3, 0xcdaf, 0xcd9a, 0xcd85, 
    0xcd71, 0xcd5c, 0xcd47, 0xcd33, 0xcd1e, 0xcd0a, 0xccf5, 0xcce1, 
    0xcccc, 0xccb8, 0xcca3, 0xcc8f, 0xcc7b, 0xcc66, 0xcc52, 0xcc3d, 
    0xcc29, 0xcc15, 0xcc00, 0xcbec, 0xcbd8, 0xcbc3, 0xcbaf, 0xcb9b, 
    0xcb87, 0xcb72, 0xcb5e, 0xcb4a, 0xcb36, 0xcb22, 0xcb0e, 0xcaf9, 
    0xcae5, 0xcad1, 0xcabd, 0xcaa9, 0xca95, 0xca81, 0xca6d, 0xca59, 
    0xca45, 0xca31, 0xca1d, 0xca09, 0xc9f5, 0xc9e1, 0xc9cd, 0xc9ba, 
    0xc9a6, 0xc992, 0xc97e, 0xc96a, 0xc956, 0xc943, 0xc92f, 0xc91b, 
    0xc907, 0xc8f4, 0xc8e0, 0xc8cc, 0xc8b9, 0xc8a5, 0xc891, 0xc87e, 
    0xc86a, 0xc856, 0xc843, 0xc82f, 0xc81c, 0xc808, 0xc7f5, 0xc7e1, 
    0xc7ce, 0xc7ba, 0xc7a7, 0xc793, 0xc780, 0xc76c, 0xc759, 0xc745, 
    0xc732, 0xc71f, 0xc70b, 0xc6f8, 0xc6e5, 0xc6d1, 0xc6be, 0xc6ab, 
    0xc698, 0xc684, 0xc671, 0xc65e, 0xc64b, 0xc637, 0xc624, 0xc611, 
    0xc5fe, 0xc5eb, 0xc5d8, 0xc5c5, 0xc5b2, 0xc59e, 0xc58b, 0xc578, 
    0xc565, 0xc552, 0xc53f, 0xc52c, 0xc519, 0xc506, 0xc4f3, 0xc4e0, 
    0xc4ce, 0xc4bb, 0xc4a8, 0xc495, 0xc482, 0xc46f, 0xc45c, 0xc449, 
    0xc437, 0xc424, 0xc411, 0xc3fe, 0xc3ec, 0xc3d9, 0xc3c6, 0xc3b3, 
    0xc3a1, 0xc38e, 0xc37b, 0xc369, 0xc356, 0xc343, 0xc331, 0xc31e, 
    0xc30c, 0xc2f9, 0xc2e7, 0xc2d4, 0xc2c1, 0xc2af, 0xc29c, 0xc28a, 
    0xc278, 0xc265, 0xc253, 0xc240, 0xc22e, 0xc21b, 0xc209, 0xc1f7, 
    0xc1e4, 0xc1d2, 0xc1c0, 0xc1ad, 0xc19b, 0xc189, 0xc176, 0xc164, 
    0xc152, 0xc140, 0xc12d, 0xc11b, 0xc109, 0xc0f7, 0xc0e5, 0xc0d2, 
    0xc0c0, 0xc0ae, 0xc09c, 0xc08a, 0xc078, 0xc066, 0xc054, 0xc042, 
    0xc030, 0xc01e, 0xc00c, 0xbffa, 0xbfe8, 0xbfd6, 0xbfc4, 0xbfb2, 
    0xbfa0, 0xbf8e, 0xbf7c, 0xbf6a, 0xbf58, 0xbf46, 0xbf34, 0xbf23, 
    0xbf11, 0xbeff, 0xbeed, 0xbedb, 0xbec9, 0xbeb8, 0xbea6, 0xbe94, 
    0xbe82, 0xbe71, 0xbe5f, 0xbe4d, 0xbe3c, 0xbe2a, 0xbe18, 0xbe07, 
    0xbdf5, 0xbde4, 0xbdd2, 0xbdc0, 0xbdaf, 0xbd9d, 0xbd8c, 0xbd7a, 
    0xbd69, 0xbd57, 0xbd46, 0xbd34, 0xbd23, 0xbd11, 0xbd00, 0xbcee, 
    0xbcdd, 0xbccb, 0xbcba, 0xbca9, 0xbc97, 0xbc86, 0xbc75, 0xbc63, 
    0xbc52, 0xbc41, 0xbc2f, 0xbc1e, 0xbc0d, 0xbbfb, 0xbbea, 0xbbd9, 
    0xbbc8, 0xbbb7, 0xbba5, 0xbb94, 0xbb83, 0xbb72, 0xbb61, 0xbb50, 
    0xbb3e, 0xbb2d, 0xbb1c, 0xbb0b, 0xbafa, 0xbae9, 0xbad8, 0xbac7, 
    0xbab6, 0xbaa5, 0xba94, 0xba83, 0xba72, 0xba61, 0xba50, 0xba3f, 
    0xba2e, 0xba1d, 0xba0c, 0xb9fb, 0xb9ea, 0xb9da, 0xb9c9, 0xb9b8, 
    0xb9a7, 0xb996, 0xb985, 0xb975, 0xb964, 0xb953, 0xb942, 0xb932, 
    0xb921, 0xb910, 0xb8ff, 0xb8ef, 0xb8de, 0xb8cd, 0xb8bd, 0xb8ac, 
    0xb89b, 0xb88b, 0xb87a, 0xb869, 0xb859, 0xb848, 0xb838, 0xb827, 
    0xb817, 0xb806, 0xb7f5, 0xb7e5, 0xb7d4, 0xb7c4, 0xb7b3, 0xb7a3, 
    0xb793, 0xb782, 0xb772, 0xb761, 0xb751, 0xb740, 0xb730, 0xb720, 
    0xb70f, 0xb6ff, 0xb6ef, 0xb6de, 0xb6ce, 0xb6be, 0xb6ad, 0xb69d, 
    0xb68d, 0xb67c, 0xb66c, 0xb65c, 0xb64c, 0xb63b, 0xb62b, 0xb61b, 
    0xb60b, 0xb5fb, 0xb5eb, 0xb5da, 0xb5ca, 0xb5ba, 0xb5aa, 0xb59a, 
    0xb58a, 0xb57a, 0xb56a, 0xb55a, 0xb54a, 0xb539, 0xb529, 0xb519, 
    0xb509, 0xb4f9, 0xb4e9, 0xb4d9, 0xb4c9, 0xb4ba, 0xb4aa, 0xb49a, 
    0xb48a, 0xb47a, 0xb46a, 0xb45a, 0xb44a, 0xb43a, 0xb42a, 0xb41b, 
    0xb40b, 0xb3fb, 0xb3eb, 0xb3db, 0xb3cc, 0xb3bc, 0xb3ac, 0xb39c, 
    0xb38c, 0xb37d, 0xb36d, 0xb35d, 0xb34e, 0xb33e, 0xb32e, 0xb31f, 
    0xb30f, 0xb2ff, 0xb2f0, 0xb2e0, 0xb2d0, 0xb2c1, 0xb2b1, 0xb2a2, 
    0xb292, 0xb282, 0xb273, 0xb263, 0xb254, 0xb244, 0xb235, 0xb225, 
    0xb216, 0xb206, 0xb1f7, 0xb1e7, 0xb1d8, 0xb1c8, 0xb1b9, 0xb1aa, 
    0xb19a, 0xb18b, 0xb17b, 0xb16c, 0xb15d, 0xb14d, 0xb13e, 0xb12f, 
    0xb11f, 0xb110, 0xb101, 0xb0f1, 0xb0e2, 0xb0d3, 0xb0c4, 0xb0b4, 
    0xb0a5, 0xb096, 0xb087, 0xb077, 0xb068, 0xb059, 0xb04a, 0xb03b, 
    0xb02c, 0xb01c, 0xb00d, 0xaffe, 0xafef, 0xafe0, 0xafd1, 0xafc2, 
    0xafb3, 0xafa4, 0xaf95, 0xaf85, 0xaf76, 0xaf67, 0xaf58, 0xaf49, 
    0xaf3a, 0xaf2b, 0xaf1c, 0xaf0d, 0xaefe, 0xaef0, 0xaee1, 0xaed2, 
    0xaec3, 0xaeb4, 0xaea5, 0xae96, 0xae87, 0xae78, 0xae69, 0xae5b, 
    0xae4c, 0xae3d, 0xae2e, 0xae1f, 0xae11, 0xae02, 0xadf3, 0xade4, 
    0xadd5, 0xadc7, 0xadb8, 0xada9, 0xad9a, 0xad8c, 0xad7d, 0xad6e, 
    0xad60, 0xad51, 0xad42, 0xad34, 0xad25, 0xad16, 0xad08, 0xacf9, 
    0xaceb, 0xacdc, 0xaccd, 0xacbf, 0xacb0, 0xaca2, 0xac93, 0xac85, 
    0xac76, 0xac68, 0xac59, 0xac4b, 0xac3c, 0xac2e, 0xac1f, 0xac11, 
    0xac02, 0xabf4, 0xabe5, 0xabd7, 0xabc8, 0xabba, 0xabac, 0xab9d, 
    0xab8f, 0xab81, 0xab72, 0xab64, 0xab56, 0xab47, 0xab39, 0xab2b, 
    0xab1c, 0xab0e, 0xab00, 0xaaf1, 0xaae3, 0xaad5, 0xaac7, 0xaab8, 
    0xaaaa, 0xaa9c, 0xaa8e, 0xaa80, 0xaa71, 0xaa63, 0xaa55, 0xaa47, 
    0xaa39, 0xaa2b, 0xaa1c, 0xaa0e, 0xaa00, 0xa9f2, 0xa9e4, 0xa9d6, 
    0xa9c8, 0xa9ba, 0xa9ac, 0xa99e, 0xa990, 0xa982, 0xa974, 0xa965, 
    0xa957, 0xa949, 0xa93b, 0xa92e, 0xa920, 0xa912, 0xa904, 0xa8f6, 
    0xa8e8, 0xa8da, 0xa8cc, 0xa8be, 0xa8b0, 0xa8a2, 0xa894, 0xa886, 
    0xa879, 0xa86b, 0xa85d, 0xa84f, 0xa841, 0xa833, 0xa826, 0xa818, 
    0xa80a, 0xa7fc, 0xa7ee, 0xa7e1, 0xa7d3, 0xa7c5, 0xa7b7, 0xa7aa, 
    0xa79c, 0xa78e, 0xa781, 0xa773, 0xa765, 0xa758, 0xa74a, 0xa73c, 
    0xa72f, 0xa721, 0xa713, 0xa706, 0xa6f8, 0xa6ea, 0xa6dd, 0xa6cf, 
    0xa6c2, 0xa6b4, 0xa6a6, 0xa699, 0xa68b, 0xa67e, 0xa670, 0xa663, 
    0xa655, 0xa648, 0xa63a, 0xa62d, 0xa61f, 0xa612, 0xa604, 0xa5f7, 
    0xa5e9, 0xa5dc, 0xa5cf, 0xa5c1, 0xa5b4, 0xa5a6, 0xa599, 0xa58c, 
    0xa57e, 0xa571, 0xa563, 0xa556, 0xa549, 0xa53b, 0xa52e, 0xa521, 
    0xa513, 0xa506, 0xa4f9, 0xa4ec, 0xa4de, 0xa4d1, 0xa4c4, 0xa4b7, 
    0xa4a9, 0xa49c, 0xa48f, 0xa482, 0xa474, 0xa467, 0xa45a, 0xa44d, 
    0xa440, 0xa432, 0xa425, 0xa418, 0xa40b, 0xa3fe, 0xa3f1, 0xa3e4, 
    0xa3d7, 0xa3c9, 0xa3bc, 0xa3af, 0xa3a2, 0xa395, 0xa388, 0xa37b, 
    0xa36e, 0xa361, 0xa354, 0xa347, 0xa33a, 0xa32d, 0xa320, 0xa313, 
    0xa306, 0xa2f9, 0xa2ec, 0xa2df, 0xa2d2, 0xa2c5, 0xa2b8, 0xa2ab, 
    0xa29e, 0xa291, 0xa285, 0xa278, 0xa26b, 0xa25e, 0xa251, 0xa244, 
    0xa237, 0xa22a, 0xa21e, 0xa211, 0xa204, 0xa1f7, 0xa1ea, 0xa1de, 
    0xa1d1, 0xa1c4, 0xa1b7, 0xa1aa, 0xa19e, 0xa191, 0xa184, 0xa177, 
    0xa16b, 0xa15e, 0xa151, 0xa145, 0xa138, 0xa12b, 0xa11e, 0xa112, 
    0xa105, 0xa0f9, 0xa0ec, 0xa0df, 0xa0d3, 0xa0c6, 0xa0b9, 0xa0ad, 
    0xa0a0, 0xa094, 0xa087, 0xa07a, 0xa06e, 0xa061, 0xa055, 0xa048, 
    0xa03c, 0xa02f, 0xa023, 0xa016, 0xa00a, 0x9ffd, 0x9ff1, 0x9fe4, 
    0x9fd8, 0x9fcb, 0x9fbf, 0x9fb2, 0x9fa6, 0x9f99, 0x9f8d, 0x9f80, 
    0x9f74, 0x9f68, 0x9f5b, 0x9f4f, 0x9f42, 0x9f36, 0x9f2a, 0x9f1d, 
    0x9f11, 0x9f05, 0x9ef8, 0x9eec, 0x9ee0, 0x9ed3, 0x9ec7, 0x9ebb, 
    0x9eae, 0x9ea2, 0x9e96, 0x9e89, 0x9e7d, 0x9e71, 0x9e65, 0x9e58, 
    0x9e4c, 0x9e40, 0x9e34, 0x9e28, 0x9e1b, 0x9e0f, 0x9e03, 0x9df7, 
    0x9deb, 0x9dde, 0x9dd2, 0x9dc6, 0x9dba, 0x9dae, 0x9da2, 0x9d95, 
    0x9d89, 0x9d7d, 0x9d71, 0x9d65, 0x9d59, 0x9d4d, 0x9d41, 0x9d35, 
    0x9d29, 0x9d1d, 0x9d11, 0x9d04, 0x9cf8, 0x9cec, 0x9ce0, 0x9cd4, 
    0x9cc8, 0x9cbc, 0x9cb0, 0x9ca4, 0x9c98, 0x9c8c, 0x9c80, 0x9c75, 
    0x9c69, 0x9c5d, 0x9c51, 0x9c45, 0x9c39, 0x9c2d, 0x9c21, 0x9c15, 
    0x9c09, 0x9bfd, 0x9bf1, 0x9be6, 0x9bda, 0x9bce, 0x9bc2, 0x9bb6, 
    0x9baa, 0x9b9f, 0x9b93, 0x9b87, 0x9b7b, 0x9b6f, 0x9b64, 0x9b58, 
    0x9b4c, 0x9b40, 0x9b34, 0x9b29, 0x9b1d, 0x9b11, 0x9b05, 0x9afa, 
    0x9aee, 0x9ae2, 0x9ad7, 0x9acb, 0x9abf, 0x9ab3, 0x9aa8, 0x9a9c, 
    0x9a90, 0x9a85, 0x9a79, 0x9a6d, 0x9a62, 0x9a56, 0x9a4b, 0x9a3f, 
    0x9a33, 0x9a28, 0x9a1c, 0x9a11, 0x9a05, 0x99f9, 0x99ee, 0x99e2, 
    0x99d7, 0x99cb, 0x99c0, 0x99b4, 0x99a8, 0x999d, 0x9991, 0x9986, 
    0x997a, 0x996f, 0x9963, 0x9958, 0x994c, 0x9941, 0x9936, 0x992a, 
    0x991f, 0x9913, 0x9908, 0x98fc, 0x98f1, 0x98e5, 0x98da, 0x98cf, 
    0x98c3, 0x98b8, 0x98ac, 0x98a1, 0x9896, 0x988a, 0x987f, 0x9874, 
    0x9868, 0x985d, 0x9852, 0x9846, 0x983b, 0x9830, 0x9824, 0x9819, 
    0x980e, 0x9802, 0x97f7, 0x97ec, 0x97e1, 0x97d5, 0x97ca, 0x97bf, 
    0x97b4, 0x97a8, 0x979d, 0x9792, 0x9787, 0x977c, 0x9770, 0x9765, 
    0x975a, 0x974f, 0x9744, 0x9738, 0x972d, 0x9722, 0x9717, 0x970c, 
    0x9701, 0x96f6, 0x96ea, 0x96df, 0x96d4, 0x96c9, 0x96be, 0x96b3, 
    0x96a8, 0x969d, 0x9692, 0x9687, 0x967c, 0x9670, 0x9665, 0x965a, 
    0x964f, 0x9644, 0x9639, 0x962e, 0x9623, 0x9618, 0x960d, 0x9602, 
    0x95f7, 0x95ec, 0x95e1, 0x95d6, 0x95cb, 0x95c0, 0x95b6, 0x95ab, 
    0x95a0, 0x9595, 0x958a, 0x957f, 0x9574, 0x9569, 0x955e, 0x9553, 
    0x9548, 0x953e, 0x9533, 0x9528, 0x951d, 0x9512, 0x9507, 0x94fc, 
    0x94f2, 0x94e7, 0x94dc, 0x94d1, 0x94c6, 0x94bb, 0x94b1, 0x94a6, 
    0x949b, 0x9490, 0x9486, 0x947b, 0x9470, 0x9465, 0x945a, 0x9450, 
    0x9445, 0x943a, 0x9430, 0x9425, 0x941a, 0x940f, 0x9405, 0x93fa, 
    0x93ef, 0x93e5, 0x93da, 0x93cf, 0x93c5, 0x93ba, 0x93af, 0x93a5, 
    0x939a, 0x938f, 0x9385, 0x937a, 0x9370, 0x9365, 0x935a, 0x9350, 
    0x9345, 0x933b, 0x9330, 0x9325, 0x931b, 0x9310, 0x9306, 0x92fb, 
    0x92f1, 0x92e6, 0x92dc, 0x92d1, 0x92c6, 0x92bc, 0x92b1, 0x92a7, 
    0x929c, 0x9292, 0x9287, 0x927d, 0x9272, 0x9268, 0x925e, 0x9253, 
    0x9249, 0x923e, 0x9234, 0x9229, 0x921f, 0x9214, 0x920a, 0x9200, 
    0x91f5, 0x91eb, 0x91e0, 0x91d6, 0x91cc, 0x91c1, 0x91b7, 0x91ad, 
    0x91a2, 0x9198, 0x918e, 0x9183, 0x9179, 0x916e, 0x9164, 0x915a, 
    0x9150, 0x9145, 0x913b, 0x9131, 0x9126, 0x911c, 0x9112, 0x9108, 
    0x90fd, 0x90f3, 0x90e9, 0x90de, 0x90d4, 0x90ca, 0x90c0, 0x90b6, 
    0x90ab, 0x90a1, 0x9097, 0x908d, 0x9082, 0x9078, 0x906e, 0x9064, 
    0x905a, 0x9050, 0x9045, 0x903b, 0x9031, 0x9027, 0x901d, 0x9013, 
    0x9009, 0x8ffe, 0x8ff4, 0x8fea, 0x8fe0, 0x8fd6, 0x8fcc, 0x8fc2, 
    0x8fb8, 0x8fae, 0x8fa3, 0x8f99, 0x8f8f, 0x8f85, 0x8f7b, 0x8f71, 
    0x8f67, 0x8f5d, 0x8f53, 0x8f49, 0x8f3f, 0x8f35, 0x8f2b, 0x8f21, 
    0x8f17, 0x8f0d, 0x8f03, 0x8ef9, 0x8eef, 0x8ee5, 0x8edb, 0x8ed1, 
    0x8ec7, 0x8ebd, 0x8eb3, 0x8ea9, 0x8e9f, 0x8e95, 0x8e8c, 0x8e82, 
    0x8e78, 0x8e6e, 0x8e64, 0x8e5a, 0x8e50, 0x8e46, 0x8e3c, 0x8e32, 
    0x8e29, 0x8e1f, 0x8e15, 0x8e0b, 0x8e01, 0x8df7, 0x8ded, 0x8de4, 
    0x8dda, 0x8dd0, 0x8dc6, 0x8dbc, 0x8db3, 0x8da9, 0x8d9f, 0x8d95, 
    0x8d8b, 0x8d82, 0x8d78, 0x8d6e, 0x8d64, 0x8d5b, 0x8d51, 0x8d47, 
    0x8d3d, 0x8d34, 0x8d2a, 0x8d20, 0x8d16, 0x8d0d, 0x8d03, 0x8cf9, 
    0x8cf0, 0x8ce6, 0x8cdc, 0x8cd2, 0x8cc9, 0x8cbf, 0x8cb5, 0x8cac, 
    0x8ca2, 0x8c98, 0x8c8f, 0x8c85, 0x8c7c, 0x8c72, 0x8c68, 0x8c5f, 
    0x8c55, 0x8c4b, 0x8c42, 0x8c38, 0x8c2f, 0x8c25, 0x8c1b, 0x8c12, 
    0x8c08, 0x8bff, 0x8bf5, 0x8bec, 0x8be2, 0x8bd8, 0x8bcf, 0x8bc5, 
    0x8bbc, 0x8bb2, 0x8ba9, 0x8b9f, 0x8b96, 0x8b8c, 0x8b83, 0x8b79, 
    0x8b70, 0x8b66, 0x8b5d, 0x8b53, 0x8b4a, 0x8b40, 0x8b37, 0x8b2d, 
    0x8b24, 0x8b1a, 0x8b11, 0x8b08, 0x8afe, 0x8af5, 0x8aeb, 0x8ae2, 
    0x8ad8, 0x8acf, 0x8ac6, 0x8abc, 0x8ab3, 0x8aa9, 0x8aa0, 0x8a97, 
    0x8a8d, 0x8a84, 0x8a7b, 0x8a71, 0x8a68, 0x8a5e, 0x8a55, 0x8a4c, 
    0x8a42, 0x8a39, 0x8a30, 0x8a26, 0x8a1d, 0x8a14, 0x8a0b, 0x8a01, 
    0x89f8, 0x89ef, 0x89e5, 0x89dc, 0x89d3, 0x89ca, 0x89c0, 0x89b7, 
    0x89ae, 0x89a5, 0x899b, 0x8992, 0x8989, 0x8980, 0x8976, 0x896d, 
    0x8964, 0x895b, 0x8951, 0x8948, 0x893f, 0x8936, 0x892d, 0x8923, 
    0x891a, 0x8911, 0x8908, 0x88ff, 0x88f6, 0x88ec, 0x88e3, 0x88da, 
    0x88d1, 0x88c8, 0x88bf, 0x88b6, 0x88ac, 0x88a3, 0x889a, 0x8891, 
    0x8888, 0x887f, 0x8876, 0x886d, 0x8864, 0x885b, 0x8852, 0x8848, 
    0x883f, 0x8836, 0x882d, 0x8824, 0x881b, 0x8812, 0x8809, 0x8800, 
    0x87f7, 0x87ee, 0x87e5, 0x87dc, 0x87d3, 0x87ca, 0x87c1, 0x87b8, 
    0x87af, 0x87a6, 0x879d, 0x8794, 0x878b, 0x8782, 0x8779, 0x8770, 
    0x8767, 0x875e, 0x8755, 0x874c, 0x8743, 0x873a, 0x8732, 0x8729, 
    0x8720, 0x8717, 0x870e, 0x8705, 0x86fc, 0x86f3, 0x86ea, 0x86e1, 
    0x86d9, 0x86d0, 0x86c7, 0x86be, 0x86b5, 0x86ac, 0x86a3, 0x869a, 
    0x8692, 0x8689, 0x8680, 0x8677, 0x866e, 0x8665, 0x865d, 0x8654, 
    0x864b, 0x8642, 0x8639, 0x8631, 0x8628, 0x861f, 0x8616, 0x860e, 
    0x8605, 0x85fc, 0x85f3, 0x85ea, 0x85e2, 0x85d9, 0x85d0, 0x85c7, 
    0x85bf, 0x85b6, 0x85ad, 0x85a5, 0x859c, 0x8593, 0x858a, 0x8582, 
    0x8579, 0x8570, 0x8568, 0x855f, 0x8556, 0x854e, 0x8545, 0x853c, 
    0x8534, 0x852b, 0x8522, 0x851a, 0x8511, 0x8508, 0x8500, 0x84f7, 
    0x84ee, 0x84e6, 0x84dd, 0x84d5, 0x84cc, 0x84c3, 0x84bb, 0x84b2, 
    0x84a9, 0x84a1, 0x8498, 0x8490, 0x8487, 0x847f, 0x8476, 0x846d, 
    0x8465, 0x845c, 0x8454, 0x844b, 0x8443, 0x843a, 0x8432, 0x8429, 
    0x8421, 0x8418, 0x840f, 0x8407, 0x83fe, 0x83f6, 0x83ed, 0x83e5, 
    0x83dc, 0x83d4, 0x83cc, 0x83c3, 0x83bb, 0x83b2, 0x83aa, 0x83a1, 
    0x8399, 0x8390, 0x8388, 0x837f, 0x8377, 0x836e, 0x8366, 0x835e, 
    0x8355, 0x834d, 0x8344, 0x833c, 0x8334, 0x832b, 0x8323, 0x831a, 
    0x8312, 0x830a, 0x8301, 0x82f9, 0x82f0, 0x82e8, 0x82e0, 0x82d7, 
    0x82cf, 0x82c7, 0x82be, 0x82b6, 0x82ae, 0x82a5, 0x829d, 0x8295, 
    0x828c, 0x8284, 0x827c, 0x8273, 0x826b, 0x8263, 0x825a, 0x8252, 
    0x824a, 0x8242, 0x8239, 0x8231, 0x8229, 0x8220, 0x8218, 0x8210, 
    0x8208, 0x81ff, 0x81f7, 0x81ef, 0x81e7, 0x81de, 0x81d6, 0x81ce, 
    0x81c6, 0x81bd, 0x81b5, 0x81ad, 0x81a5, 0x819d, 0x8194, 0x818c, 
    0x8184, 0x817c, 0x8174, 0x816c, 0x8163, 0x815b, 0x8153, 0x814b, 
    0x8143, 0x813b, 0x8132, 0x812a, 0x8122, 0x811a, 0x8112, 0x810a, 
    0x8102, 0x80f9, 0x80f1, 0x80e9, 0x80e1, 0x80d9, 0x80d1, 0x80c9, 
    0x80c1, 0x80b9, 0x80b0, 0x80a8, 0x80a0, 0x8098, 0x8090, 0x8088, 
    0x8080, 0x8078, 0x8070, 0x8068, 0x8060, 0x8058, 0x8050, 0x8048, 
    0x8040, 0x8038, 0x8030, 0x8028, 0x8020, 0x8018, 0x8010, 0x8008
};
#else
#if ML_FIXED_RADIX == 12
static unsigned long recipLUT[] = { 
    0x1000, 0xffe, 0xffc, 0xffa, 0xff8, 0xff6, 0xff4, 0xff2, 
    0xff0, 0xfee, 0xfec, 0xfea, 0xfe8, 0xfe6, 0xfe4, 0xfe2, 
    0xfe0, 0xfde, 0xfdc, 0xfda, 0xfd8, 0xfd6, 0xfd4, 0xfd2, 
    0xfd0, 0xfce, 0xfcc, 0xfca, 0xfc8, 0xfc6, 0xfc4, 0xfc2, 
    0xfc0, 0xfbf, 0xfbd, 0xfbb, 0xfb9, 0xfb7, 0xfb5, 0xfb3, 
    0xfb1, 0xfaf, 0xfad, 0xfab, 0xfa9, 0xfa7, 0xfa6, 0xfa4, 
    0xfa2, 0xfa0, 0xf9e, 0xf9c, 0xf9a, 0xf98, 0xf96, 0xf94, 
    0xf92, 0xf91, 0xf8f, 0xf8d, 0xf8b, 0xf89, 0xf87, 0xf85, 
    0xf83, 0xf81, 0xf80, 0xf7e, 0xf7c, 0xf7a, 0xf78, 0xf76, 
    0xf74, 0xf73, 0xf71, 0xf6f, 0xf6d, 0xf6b, 0xf69, 0xf67, 
    0xf66, 0xf64, 0xf62, 0xf60, 0xf5e, 0xf5c, 0xf5a, 0xf59, 
    0xf57, 0xf55, 0xf53, 0xf51, 0xf4f, 0xf4e, 0xf4c, 0xf4a, 
    0xf48, 0xf46, 0xf44, 0xf43, 0xf41, 0xf3f, 0xf3d, 0xf3b, 
    0xf3a, 0xf38, 0xf36, 0xf34, 0xf32, 0xf31, 0xf2f, 0xf2d, 
    0xf2b, 0xf29, 0xf28, 0xf26, 0xf24, 0xf22, 0xf20, 0xf1f, 
    0xf1d, 0xf1b, 0xf19, 0xf17, 0xf16, 0xf14, 0xf12, 0xf10, 
    0xf0f, 0xf0d, 0xf0b, 0xf09, 0xf07, 0xf06, 0xf04, 0xf02, 
    0xf00, 0xeff, 0xefd, 0xefb, 0xef9, 0xef8, 0xef6, 0xef4, 
    0xef2, 0xef1, 0xeef, 0xeed, 0xeeb, 0xeea, 0xee8, 0xee6, 
    0xee5, 0xee3, 0xee1, 0xedf, 0xede, 0xedc, 0xeda, 0xed8, 
    0xed7, 0xed5, 0xed3, 0xed2, 0xed0, 0xece, 0xecc, 0xecb, 
    0xec9, 0xec7, 0xec6, 0xec4, 0xec2, 0xec0, 0xebf, 0xebd, 
    0xebb, 0xeba, 0xeb8, 0xeb6, 0xeb5, 0xeb3, 0xeb1, 0xeb0, 
    0xeae, 0xeac, 0xeaa, 0xea9, 0xea7, 0xea5, 0xea4, 0xea2, 
    0xea0, 0xe9f, 0xe9d, 0xe9b, 0xe9a, 0xe98, 0xe96, 0xe95, 
    0xe93, 0xe91, 0xe90, 0xe8e, 0xe8c, 0xe8b, 0xe89, 0xe88, 
    0xe86, 0xe84, 0xe83, 0xe81, 0xe7f, 0xe7e, 0xe7c, 0xe7a, 
    0xe79, 0xe77, 0xe75, 0xe74, 0xe72, 0xe71, 0xe6f, 0xe6d, 
    0xe6c, 0xe6a, 0xe68, 0xe67, 0xe65, 0xe64, 0xe62, 0xe60, 
    0xe5f, 0xe5d, 0xe5b, 0xe5a, 0xe58, 0xe57, 0xe55, 0xe53, 
    0xe52, 0xe50, 0xe4f, 0xe4d, 0xe4b, 0xe4a, 0xe48, 0xe47, 
    0xe45, 0xe43, 0xe42, 0xe40, 0xe3f, 0xe3d, 0xe3c, 0xe3a, 
    0xe38, 0xe37, 0xe35, 0xe34, 0xe32, 0xe31, 0xe2f, 0xe2d, 
    0xe2c, 0xe2a, 0xe29, 0xe27, 0xe26, 0xe24, 0xe22, 0xe21, 
    0xe1f, 0xe1e, 0xe1c, 0xe1b, 0xe19, 0xe18, 0xe16, 0xe14, 
    0xe13, 0xe11, 0xe10, 0xe0e, 0xe0d, 0xe0b, 0xe0a, 0xe08, 
    0xe07, 0xe05, 0xe03, 0xe02, 0xe00, 0xdff, 0xdfd, 0xdfc, 
    0xdfa, 0xdf9, 0xdf7, 0xdf6, 0xdf4, 0xdf3, 0xdf1, 0xdf0, 
    0xdee, 0xded, 0xdeb, 0xdea, 0xde8, 0xde7, 0xde5, 0xde4, 
    0xde2, 0xde0, 0xddf, 0xddd, 0xddc, 0xdda, 0xdd9, 0xdd7, 
    0xdd6, 0xdd4, 0xdd3, 0xdd2, 0xdd0, 0xdcf, 0xdcd, 0xdcc, 
    0xdca, 0xdc9, 0xdc7, 0xdc6, 0xdc4, 0xdc3, 0xdc1, 0xdc0, 
    0xdbe, 0xdbd, 0xdbb, 0xdba, 0xdb8, 0xdb7, 0xdb5, 0xdb4, 
    0xdb2, 0xdb1, 0xdb0, 0xdae, 0xdad, 0xdab, 0xdaa, 0xda8, 
    0xda7, 0xda5, 0xda4, 0xda2, 0xda1, 0xd9f, 0xd9e, 0xd9d, 
    0xd9b, 0xd9a, 0xd98, 0xd97, 0xd95, 0xd94, 0xd92, 0xd91, 
    0xd90, 0xd8e, 0xd8d, 0xd8b, 0xd8a, 0xd88, 0xd87, 0xd86, 
    0xd84, 0xd83, 0xd81, 0xd80, 0xd7e, 0xd7d, 0xd7c, 0xd7a, 
    0xd79, 0xd77, 0xd76, 0xd75, 0xd73, 0xd72, 0xd70, 0xd6f, 
    0xd6d, 0xd6c, 0xd6b, 0xd69, 0xd68, 0xd66, 0xd65, 0xd64, 
    0xd62, 0xd61, 0xd5f, 0xd5e, 0xd5d, 0xd5b, 0xd5a, 0xd58, 
    0xd57, 0xd56, 0xd54, 0xd53, 0xd52, 0xd50, 0xd4f, 0xd4d, 
    0xd4c, 0xd4b, 0xd49, 0xd48, 0xd46, 0xd45, 0xd44, 0xd42, 
    0xd41, 0xd40, 0xd3e, 0xd3d, 0xd3b, 0xd3a, 0xd39, 0xd37, 
    0xd36, 0xd35, 0xd33, 0xd32, 0xd31, 0xd2f, 0xd2e, 0xd2c, 
    0xd2b, 0xd2a, 0xd28, 0xd27, 0xd26, 0xd24, 0xd23, 0xd22, 
    0xd20, 0xd1f, 0xd1e, 0xd1c, 0xd1b, 0xd1a, 0xd18, 0xd17, 
    0xd16, 0xd14, 0xd13, 0xd12, 0xd10, 0xd0f, 0xd0e, 0xd0c, 
    0xd0b, 0xd0a, 0xd08, 0xd07, 0xd06, 0xd04, 0xd03, 0xd02, 
    0xd00, 0xcff, 0xcfe, 0xcfc, 0xcfb, 0xcfa, 0xcf8, 0xcf7, 
    0xcf6, 0xcf4, 0xcf3, 0xcf2, 0xcf1, 0xcef, 0xcee, 0xced, 
    0xceb, 0xcea, 0xce9, 0xce7, 0xce6, 0xce5, 0xce4, 0xce2, 
    0xce1, 0xce0, 0xcde, 0xcdd, 0xcdc, 0xcda, 0xcd9, 0xcd8, 
    0xcd7, 0xcd5, 0xcd4, 0xcd3, 0xcd1, 0xcd0, 0xccf, 0xcce, 
    0xccc, 0xccb, 0xcca, 0xcc8, 0xcc7, 0xcc6, 0xcc5, 0xcc3, 
    0xcc2, 0xcc1, 0xcc0, 0xcbe, 0xcbd, 0xcbc, 0xcba, 0xcb9, 
    0xcb8, 0xcb7, 0xcb5, 0xcb4, 0xcb3, 0xcb2, 0xcb0, 0xcaf, 
    0xcae, 0xcad, 0xcab, 0xcaa, 0xca9, 0xca8, 0xca6, 0xca5, 
    0xca4, 0xca3, 0xca1, 0xca0, 0xc9f, 0xc9e, 0xc9c, 0xc9b, 
    0xc9a, 0xc99, 0xc97, 0xc96, 0xc95, 0xc94, 0xc92, 0xc91, 
    0xc90, 0xc8f, 0xc8e, 0xc8c, 0xc8b, 0xc8a, 0xc89, 0xc87, 
    0xc86, 0xc85, 0xc84, 0xc82, 0xc81, 0xc80, 0xc7f, 0xc7e, 
    0xc7c, 0xc7b, 0xc7a, 0xc79, 0xc78, 0xc76, 0xc75, 0xc74, 
    0xc73, 0xc71, 0xc70, 0xc6f, 0xc6e, 0xc6d, 0xc6b, 0xc6a, 
    0xc69, 0xc68, 0xc67, 0xc65, 0xc64, 0xc63, 0xc62, 0xc61, 
    0xc5f, 0xc5e, 0xc5d, 0xc5c, 0xc5b, 0xc59, 0xc58, 0xc57, 
    0xc56, 0xc55, 0xc53, 0xc52, 0xc51, 0xc50, 0xc4f, 0xc4e, 
    0xc4c, 0xc4b, 0xc4a, 0xc49, 0xc48, 0xc46, 0xc45, 0xc44, 
    0xc43, 0xc42, 0xc41, 0xc3f, 0xc3e, 0xc3d, 0xc3c, 0xc3b, 
    0xc3a, 0xc38, 0xc37, 0xc36, 0xc35, 0xc34, 0xc33, 0xc31, 
    0xc30, 0xc2f, 0xc2e, 0xc2d, 0xc2c, 0xc2a, 0xc29, 0xc28, 
    0xc27, 0xc26, 0xc25, 0xc24, 0xc22, 0xc21, 0xc20, 0xc1f, 
    0xc1e, 0xc1d, 0xc1c, 0xc1a, 0xc19, 0xc18, 0xc17, 0xc16, 
    0xc15, 0xc14, 0xc12, 0xc11, 0xc10, 0xc0f, 0xc0e, 0xc0d, 
    0xc0c, 0xc0a, 0xc09, 0xc08, 0xc07, 0xc06, 0xc05, 0xc04, 
    0xc03, 0xc01, 0xc00, 0xbff, 0xbfe, 0xbfd, 0xbfc, 0xbfb, 
    0xbfa, 0xbf8, 0xbf7, 0xbf6, 0xbf5, 0xbf4, 0xbf3, 0xbf2, 
    0xbf1, 0xbef, 0xbee, 0xbed, 0xbec, 0xbeb, 0xbea, 0xbe9, 
    0xbe8, 0xbe7, 0xbe5, 0xbe4, 0xbe3, 0xbe2, 0xbe1, 0xbe0, 
    0xbdf, 0xbde, 0xbdd, 0xbdc, 0xbda, 0xbd9, 0xbd8, 0xbd7, 
    0xbd6, 0xbd5, 0xbd4, 0xbd3, 0xbd2, 0xbd1, 0xbd0, 0xbce, 
    0xbcd, 0xbcc, 0xbcb, 0xbca, 0xbc9, 0xbc8, 0xbc7, 0xbc6, 
    0xbc5, 0xbc4, 0xbc2, 0xbc1, 0xbc0, 0xbbf, 0xbbe, 0xbbd, 
    0xbbc, 0xbbb, 0xbba, 0xbb9, 0xbb8, 0xbb7, 0xbb6, 0xbb5, 
    0xbb3, 0xbb2, 0xbb1, 0xbb0, 0xbaf, 0xbae, 0xbad, 0xbac, 
    0xbab, 0xbaa, 0xba9, 0xba8, 0xba7, 0xba6, 0xba5, 0xba3, 
    0xba2, 0xba1, 0xba0, 0xb9f, 0xb9e, 0xb9d, 0xb9c, 0xb9b, 
    0xb9a, 0xb99, 0xb98, 0xb97, 0xb96, 0xb95, 0xb94, 0xb93, 
    0xb92, 0xb91, 0xb8f, 0xb8e, 0xb8d, 0xb8c, 0xb8b, 0xb8a, 
    0xb89, 0xb88, 0xb87, 0xb86, 0xb85, 0xb84, 0xb83, 0xb82, 
    0xb81, 0xb80, 0xb7f, 0xb7e, 0xb7d, 0xb7c, 0xb7b, 0xb7a, 
    0xb79, 0xb78, 0xb77, 0xb76, 0xb75, 0xb74, 0xb73, 0xb72, 
    0xb70, 0xb6f, 0xb6e, 0xb6d, 0xb6c, 0xb6b, 0xb6a, 0xb69, 
    0xb68, 0xb67, 0xb66, 0xb65, 0xb64, 0xb63, 0xb62, 0xb61, 
    0xb60, 0xb5f, 0xb5e, 0xb5d, 0xb5c, 0xb5b, 0xb5a, 0xb59, 
    0xb58, 0xb57, 0xb56, 0xb55, 0xb54, 0xb53, 0xb52, 0xb51, 
    0xb50, 0xb4f, 0xb4e, 0xb4d, 0xb4c, 0xb4b, 0xb4a, 0xb49, 
    0xb48, 0xb47, 0xb46, 0xb45, 0xb44, 0xb43, 0xb42, 0xb41, 
    0xb40, 0xb3f, 0xb3e, 0xb3d, 0xb3c, 0xb3b, 0xb3a, 0xb39, 
    0xb38, 0xb37, 0xb36, 0xb35, 0xb34, 0xb33, 0xb32, 0xb31, 
    0xb30, 0xb2f, 0xb2f, 0xb2e, 0xb2d, 0xb2c, 0xb2b, 0xb2a, 
    0xb29, 0xb28, 0xb27, 0xb26, 0xb25, 0xb24, 0xb23, 0xb22, 
    0xb21, 0xb20, 0xb1f, 0xb1e, 0xb1d, 0xb1c, 0xb1b, 0xb1a, 
    0xb19, 0xb18, 0xb17, 0xb16, 0xb15, 0xb14, 0xb13, 0xb12, 
    0xb11, 0xb11, 0xb10, 0xb0f, 0xb0e, 0xb0d, 0xb0c, 0xb0b, 
    0xb0a, 0xb09, 0xb08, 0xb07, 0xb06, 0xb05, 0xb04, 0xb03, 
    0xb02, 0xb01, 0xb00, 0xaff, 0xafe, 0xafe, 0xafd, 0xafc, 
    0xafb, 0xafa, 0xaf9, 0xaf8, 0xaf7, 0xaf6, 0xaf5, 0xaf4, 
    0xaf3, 0xaf2, 0xaf1, 0xaf0, 0xaef, 0xaef, 0xaee, 0xaed, 
    0xaec, 0xaeb, 0xaea, 0xae9, 0xae8, 0xae7, 0xae6, 0xae5, 
    0xae4, 0xae3, 0xae2, 0xae1, 0xae1, 0xae0, 0xadf, 0xade, 
    0xadd, 0xadc, 0xadb, 0xada, 0xad9, 0xad8, 0xad7, 0xad6, 
    0xad6, 0xad5, 0xad4, 0xad3, 0xad2, 0xad1, 0xad0, 0xacf, 
    0xace, 0xacd, 0xacc, 0xacb, 0xacb, 0xaca, 0xac9, 0xac8, 
    0xac7, 0xac6, 0xac5, 0xac4, 0xac3, 0xac2, 0xac1, 0xac1, 
    0xac0, 0xabf, 0xabe, 0xabd, 0xabc, 0xabb, 0xaba, 0xab9, 
    0xab8, 0xab8, 0xab7, 0xab6, 0xab5, 0xab4, 0xab3, 0xab2, 
    0xab1, 0xab0, 0xab0, 0xaaf, 0xaae, 0xaad, 0xaac, 0xaab, 
    0xaaa, 0xaa9, 0xaa8, 0xaa8, 0xaa7, 0xaa6, 0xaa5, 0xaa4, 
    0xaa3, 0xaa2, 0xaa1, 0xaa0, 0xaa0, 0xa9f, 0xa9e, 0xa9d, 
    0xa9c, 0xa9b, 0xa9a, 0xa99, 0xa99, 0xa98, 0xa97, 0xa96, 
    0xa95, 0xa94, 0xa93, 0xa92, 0xa92, 0xa91, 0xa90, 0xa8f, 
    0xa8e, 0xa8d, 0xa8c, 0xa8b, 0xa8b, 0xa8a, 0xa89, 0xa88, 
    0xa87, 0xa86, 0xa85, 0xa84, 0xa84, 0xa83, 0xa82, 0xa81, 
    0xa80, 0xa7f, 0xa7e, 0xa7e, 0xa7d, 0xa7c, 0xa7b, 0xa7a, 
    0xa79, 0xa78, 0xa78, 0xa77, 0xa76, 0xa75, 0xa74, 0xa73, 
    0xa72, 0xa72, 0xa71, 0xa70, 0xa6f, 0xa6e, 0xa6d, 0xa6c, 
    0xa6c, 0xa6b, 0xa6a, 0xa69, 0xa68, 0xa67, 0xa67, 0xa66, 
    0xa65, 0xa64, 0xa63, 0xa62, 0xa61, 0xa61, 0xa60, 0xa5f, 
    0xa5e, 0xa5d, 0xa5c, 0xa5c, 0xa5b, 0xa5a, 0xa59, 0xa58, 
    0xa57, 0xa57, 0xa56, 0xa55, 0xa54, 0xa53, 0xa52, 0xa52, 
    0xa51, 0xa50, 0xa4f, 0xa4e, 0xa4d, 0xa4d, 0xa4c, 0xa4b, 
    0xa4a, 0xa49, 0xa48, 0xa48, 0xa47, 0xa46, 0xa45, 0xa44, 
    0xa44, 0xa43, 0xa42, 0xa41, 0xa40, 0xa3f, 0xa3f, 0xa3e, 
    0xa3d, 0xa3c, 0xa3b, 0xa3a, 0xa3a, 0xa39, 0xa38, 0xa37, 
    0xa36, 0xa36, 0xa35, 0xa34, 0xa33, 0xa32, 0xa32, 0xa31, 
    0xa30, 0xa2f, 0xa2e, 0xa2d, 0xa2d, 0xa2c, 0xa2b, 0xa2a, 
    0xa29, 0xa29, 0xa28, 0xa27, 0xa26, 0xa25, 0xa25, 0xa24, 
    0xa23, 0xa22, 0xa21, 0xa21, 0xa20, 0xa1f, 0xa1e, 0xa1d, 
    0xa1d, 0xa1c, 0xa1b, 0xa1a, 0xa19, 0xa19, 0xa18, 0xa17, 
    0xa16, 0xa15, 0xa15, 0xa14, 0xa13, 0xa12, 0xa11, 0xa11, 
    0xa10, 0xa0f, 0xa0e, 0xa0d, 0xa0d, 0xa0c, 0xa0b, 0xa0a, 
    0xa0a, 0xa09, 0xa08, 0xa07, 0xa06, 0xa06, 0xa05, 0xa04, 
    0xa03, 0xa02, 0xa02, 0xa01, 0xa00, 0x9ff, 0x9ff, 0x9fe, 
    0x9fd, 0x9fc, 0x9fb, 0x9fb, 0x9fa, 0x9f9, 0x9f8, 0x9f8, 
    0x9f7, 0x9f6, 0x9f5, 0x9f4, 0x9f4, 0x9f3, 0x9f2, 0x9f1, 
    0x9f1, 0x9f0, 0x9ef, 0x9ee, 0x9ee, 0x9ed, 0x9ec, 0x9eb, 
    0x9ea, 0x9ea, 0x9e9, 0x9e8, 0x9e7, 0x9e7, 0x9e6, 0x9e5, 
    0x9e4, 0x9e4, 0x9e3, 0x9e2, 0x9e1, 0x9e0, 0x9e0, 0x9df, 
    0x9de, 0x9dd, 0x9dd, 0x9dc, 0x9db, 0x9da, 0x9da, 0x9d9, 
    0x9d8, 0x9d7, 0x9d7, 0x9d6, 0x9d5, 0x9d4, 0x9d4, 0x9d3, 
    0x9d2, 0x9d1, 0x9d1, 0x9d0, 0x9cf, 0x9ce, 0x9ce, 0x9cd, 
    0x9cc, 0x9cb, 0x9cb, 0x9ca, 0x9c9, 0x9c8, 0x9c8, 0x9c7, 
    0x9c6, 0x9c5, 0x9c5, 0x9c4, 0x9c3, 0x9c2, 0x9c2, 0x9c1, 
    0x9c0, 0x9bf, 0x9bf, 0x9be, 0x9bd, 0x9bc, 0x9bc, 0x9bb, 
    0x9ba, 0x9b9, 0x9b9, 0x9b8, 0x9b7, 0x9b6, 0x9b6, 0x9b5, 
    0x9b4, 0x9b4, 0x9b3, 0x9b2, 0x9b1, 0x9b1, 0x9b0, 0x9af, 
    0x9ae, 0x9ae, 0x9ad, 0x9ac, 0x9ab, 0x9ab, 0x9aa, 0x9a9, 
    0x9a9, 0x9a8, 0x9a7, 0x9a6, 0x9a6, 0x9a5, 0x9a4, 0x9a3, 
    0x9a3, 0x9a2, 0x9a1, 0x9a1, 0x9a0, 0x99f, 0x99e, 0x99e, 
    0x99d, 0x99c, 0x99c, 0x99b, 0x99a, 0x999, 0x999, 0x998, 
    0x997, 0x996, 0x996, 0x995, 0x994, 0x994, 0x993, 0x992, 
    0x991, 0x991, 0x990, 0x98f, 0x98f, 0x98e, 0x98d, 0x98c, 
    0x98c, 0x98b, 0x98a, 0x98a, 0x989, 0x988, 0x987, 0x987, 
    0x986, 0x985, 0x985, 0x984, 0x983, 0x983, 0x982, 0x981, 
    0x980, 0x980, 0x97f, 0x97e, 0x97e, 0x97d, 0x97c, 0x97b, 
    0x97b, 0x97a, 0x979, 0x979, 0x978, 0x977, 0x977, 0x976, 
    0x975, 0x974, 0x974, 0x973, 0x972, 0x972, 0x971, 0x970, 
    0x970, 0x96f, 0x96e, 0x96d, 0x96d, 0x96c, 0x96b, 0x96b, 
    0x96a, 0x969, 0x969, 0x968, 0x967, 0x967, 0x966, 0x965, 
    0x964, 0x964, 0x963, 0x962, 0x962, 0x961, 0x960, 0x960, 
    0x95f, 0x95e, 0x95e, 0x95d, 0x95c, 0x95c, 0x95b, 0x95a, 
    0x95a, 0x959, 0x958, 0x957, 0x957, 0x956, 0x955, 0x955, 
    0x954, 0x953, 0x953, 0x952, 0x951, 0x951, 0x950, 0x94f, 
    0x94f, 0x94e, 0x94d, 0x94d, 0x94c, 0x94b, 0x94b, 0x94a, 
    0x949, 0x949, 0x948, 0x947, 0x947, 0x946, 0x945, 0x945, 
    0x944, 0x943, 0x943, 0x942, 0x941, 0x940, 0x940, 0x93f, 
    0x93e, 0x93e, 0x93d, 0x93c, 0x93c, 0x93b, 0x93a, 0x93a, 
    0x939, 0x938, 0x938, 0x937, 0x937, 0x936, 0x935, 0x935, 
    0x934, 0x933, 0x933, 0x932, 0x931, 0x931, 0x930, 0x92f, 
    0x92f, 0x92e, 0x92d, 0x92d, 0x92c, 0x92b, 0x92b, 0x92a, 
    0x929, 0x929, 0x928, 0x927, 0x927, 0x926, 0x925, 0x925, 
    0x924, 0x923, 0x923, 0x922, 0x921, 0x921, 0x920, 0x920, 
    0x91f, 0x91e, 0x91e, 0x91d, 0x91c, 0x91c, 0x91b, 0x91a, 
    0x91a, 0x919, 0x918, 0x918, 0x917, 0x916, 0x916, 0x915, 
    0x915, 0x914, 0x913, 0x913, 0x912, 0x911, 0x911, 0x910, 
    0x90f, 0x90f, 0x90e, 0x90d, 0x90d, 0x90c, 0x90c, 0x90b, 
    0x90a, 0x90a, 0x909, 0x908, 0x908, 0x907, 0x906, 0x906, 
    0x905, 0x905, 0x904, 0x903, 0x903, 0x902, 0x901, 0x901, 
    0x900, 0x8ff, 0x8ff, 0x8fe, 0x8fe, 0x8fd, 0x8fc, 0x8fc, 
    0x8fb, 0x8fa, 0x8fa, 0x8f9, 0x8f8, 0x8f8, 0x8f7, 0x8f7, 
    0x8f6, 0x8f5, 0x8f5, 0x8f4, 0x8f3, 0x8f3, 0x8f2, 0x8f2, 
    0x8f1, 0x8f0, 0x8f0, 0x8ef, 0x8ee, 0x8ee, 0x8ed, 0x8ed, 
    0x8ec, 0x8eb, 0x8eb, 0x8ea, 0x8e9, 0x8e9, 0x8e8, 0x8e8, 
    0x8e7, 0x8e6, 0x8e6, 0x8e5, 0x8e5, 0x8e4, 0x8e3, 0x8e3, 
    0x8e2, 0x8e1, 0x8e1, 0x8e0, 0x8e0, 0x8df, 0x8de, 0x8de, 
    0x8dd, 0x8dd, 0x8dc, 0x8db, 0x8db, 0x8da, 0x8d9, 0x8d9, 
    0x8d8, 0x8d8, 0x8d7, 0x8d6, 0x8d6, 0x8d5, 0x8d5, 0x8d4, 
    0x8d3, 0x8d3, 0x8d2, 0x8d2, 0x8d1, 0x8d0, 0x8d0, 0x8cf, 
    0x8cf, 0x8ce, 0x8cd, 0x8cd, 0x8cc, 0x8cb, 0x8cb, 0x8ca, 
    0x8ca, 0x8c9, 0x8c8, 0x8c8, 0x8c7, 0x8c7, 0x8c6, 0x8c5, 
    0x8c5, 0x8c4, 0x8c4, 0x8c3, 0x8c2, 0x8c2, 0x8c1, 0x8c1, 
    0x8c0, 0x8bf, 0x8bf, 0x8be, 0x8be, 0x8bd, 0x8bc, 0x8bc, 
    0x8bb, 0x8bb, 0x8ba, 0x8b9, 0x8b9, 0x8b8, 0x8b8, 0x8b7, 
    0x8b7, 0x8b6, 0x8b5, 0x8b5, 0x8b4, 0x8b4, 0x8b3, 0x8b2, 
    0x8b2, 0x8b1, 0x8b1, 0x8b0, 0x8af, 0x8af, 0x8ae, 0x8ae, 
    0x8ad, 0x8ac, 0x8ac, 0x8ab, 0x8ab, 0x8aa, 0x8aa, 0x8a9, 
    0x8a8, 0x8a8, 0x8a7, 0x8a7, 0x8a6, 0x8a5, 0x8a5, 0x8a4, 
    0x8a4, 0x8a3, 0x8a3, 0x8a2, 0x8a1, 0x8a1, 0x8a0, 0x8a0, 
    0x89f, 0x89e, 0x89e, 0x89d, 0x89d, 0x89c, 0x89c, 0x89b, 
    0x89a, 0x89a, 0x899, 0x899, 0x898, 0x898, 0x897, 0x896, 
    0x896, 0x895, 0x895, 0x894, 0x893, 0x893, 0x892, 0x892, 
    0x891, 0x891, 0x890, 0x88f, 0x88f, 0x88e, 0x88e, 0x88d, 
    0x88d, 0x88c, 0x88b, 0x88b, 0x88a, 0x88a, 0x889, 0x889, 
    0x888, 0x887, 0x887, 0x886, 0x886, 0x885, 0x885, 0x884, 
    0x883, 0x883, 0x882, 0x882, 0x881, 0x881, 0x880, 0x880, 
    0x87f, 0x87e, 0x87e, 0x87d, 0x87d, 0x87c, 0x87c, 0x87b, 
    0x87a, 0x87a, 0x879, 0x879, 0x878, 0x878, 0x877, 0x877, 
    0x876, 0x875, 0x875, 0x874, 0x874, 0x873, 0x873, 0x872, 
    0x872, 0x871, 0x870, 0x870, 0x86f, 0x86f, 0x86e, 0x86e, 
    0x86d, 0x86d, 0x86c, 0x86b, 0x86b, 0x86a, 0x86a, 0x869, 
    0x869, 0x868, 0x868, 0x867, 0x866, 0x866, 0x865, 0x865, 
    0x864, 0x864, 0x863, 0x863, 0x862, 0x861, 0x861, 0x860, 
    0x860, 0x85f, 0x85f, 0x85e, 0x85e, 0x85d, 0x85d, 0x85c, 
    0x85b, 0x85b, 0x85a, 0x85a, 0x859, 0x859, 0x858, 0x858, 
    0x857, 0x857, 0x856, 0x855, 0x855, 0x854, 0x854, 0x853, 
    0x853, 0x852, 0x852, 0x851, 0x851, 0x850, 0x850, 0x84f, 
    0x84e, 0x84e, 0x84d, 0x84d, 0x84c, 0x84c, 0x84b, 0x84b, 
    0x84a, 0x84a, 0x849, 0x849, 0x848, 0x847, 0x847, 0x846, 
    0x846, 0x845, 0x845, 0x844, 0x844, 0x843, 0x843, 0x842, 
    0x842, 0x841, 0x840, 0x840, 0x83f, 0x83f, 0x83e, 0x83e, 
    0x83d, 0x83d, 0x83c, 0x83c, 0x83b, 0x83b, 0x83a, 0x83a, 
    0x839, 0x839, 0x838, 0x837, 0x837, 0x836, 0x836, 0x835, 
    0x835, 0x834, 0x834, 0x833, 0x833, 0x832, 0x832, 0x831, 
    0x831, 0x830, 0x830, 0x82f, 0x82f, 0x82e, 0x82e, 0x82d, 
    0x82c, 0x82c, 0x82b, 0x82b, 0x82a, 0x82a, 0x829, 0x829, 
    0x828, 0x828, 0x827, 0x827, 0x826, 0x826, 0x825, 0x825, 
    0x824, 0x824, 0x823, 0x823, 0x822, 0x822, 0x821, 0x821, 
    0x820, 0x81f, 0x81f, 0x81e, 0x81e, 0x81d, 0x81d, 0x81c, 
    0x81c, 0x81b, 0x81b, 0x81a, 0x81a, 0x819, 0x819, 0x818, 
    0x818, 0x817, 0x817, 0x816, 0x816, 0x815, 0x815, 0x814, 
    0x814, 0x813, 0x813, 0x812, 0x812, 0x811, 0x811, 0x810, 
    0x810, 0x80f, 0x80f, 0x80e, 0x80e, 0x80d, 0x80d, 0x80c, 
    0x80c, 0x80b, 0x80b, 0x80a, 0x80a, 0x809, 0x809, 0x808, 
    0x808, 0x807, 0x807, 0x806, 0x806, 0x805, 0x805, 0x804, 
    0x804, 0x803, 0x803, 0x802, 0x802, 0x801, 0x801, 0x800
};
#endif
#endif
#endif


// Use a table lookup and a Newton iteration to get a good approximation
// of the reciprocal of the input value.
//
MlScalar
FixedReciprocal(const MlScalar val)
{
    MlScalar ans;
    register long opA = mlScalarGetValue(val);
#if ML_FIXED_CHECK_UNINITIALIZED
    MLE_ASSERT(opA != 0xdeadbeef);
#endif /* ML_FIXED_CHECK_UNINITIALIZED */

    char sign = opA < 0;
    unsigned long a = opA < 0 ? -opA : opA;
    unsigned long x = a;

    // can\'t divide by 0.
    MLE_ASSERT(a != 0);

    // But if a=={-1,1,2} then the reciprocal will roll over
    // into the sign bit.  In this case do our best to approximate it.
    
    if (a <= 2) {
        ans = mlScalarSetValue( (sign) ? 0x80000001 : 0x7fffffff );
        return ans;
    }

    int shift = 0;
    // Shift left until we have a 1 in 2nd highest bit, then do the lookup
    while (0 == (x & HIGH_MASK_A)) {
        x <<= HIGH_SHIFT_A;
        shift += HIGH_SHIFT_A;
    }
    while (0 == (x & HIGH_MASK_B)) {
        x <<= HIGH_SHIFT_B;
        shift += HIGH_SHIFT_B;
    }

    unsigned long index = (x & INDEX_MASK) >> INDEX_SHIFT;
    unsigned long recip = recipLUT[index];

    // Now recip is approximately 1 in the fixed point notation,
    // and x is approximately 1<<(30)+epsilon. We can multiply
    // these numbers together to get a legal scaled version of
    // a*est(1/a). Do that multiply, then subtract 1<<30 from it
    // to start working on the Newton\'s iteration.  This will
    // cause us to lose bits on the high end.  Scale x down >>
    // (I-2) bits to get a number slightly above 1, multiply
    // this by (ax-1) and subtract.  You should now have a scaled
    // version of the right answer, which shift right.
    // Newton iteration using x -= x(ax-1);

    // Why do we do all this shifting?  Because ax-1 is likely to 
    // be small, and if we don\'t do it with shifted numbers, we\'ll
    // lose the very bits we\'re trying to compute.  So shift it
    // as far to the left as we can without overflowing intermediate
    // computations into the sign bit, compute the newton iteration
    // somewhat precisely, then shift back to form the answer.

    // Scalars are a, scaled a, and recip.
    MlScalar aS, saS, rS;
    aS = mlScalarSetValue(a);
    saS = mlScalarSetValue(x);
    rS = mlScalarSetValue(recip);
    MlScalar p1 = FixedMultiply(rS, saS); // almost 2^30
    MlScalar ax_1 = p1 - mlScalarSetValue(1<<30);

    // ax_1 is scaled by 2^14, but rS is true reciprocal
    // of a scaled to lie between [1..2).
    MlScalar tmp = mlScalarSetValue(recip << (30-ML_FIXED_RADIX));
    rS = tmp - FixedMultiply(rS, ax_1);
    recip = mlScalarGetValue(rS);

    // So now rS is also scaled by 14 from the true reciprocal
    // of the scaled a.  Undo all the scaling.
    register int backShift = 2*(30 - ML_FIXED_RADIX) - shift;
    if (backShift >= 0) {
        recip >>= backShift;
    }
    else {
        recip <<= -backShift;
    }

    //ans = mlScalarSetValue( (sign) ? -recip : recip );
	if (sign) ans = mlScalarSetValue(0 - recip);
	else ans = mlScalarSetValue(recip);

    return ans;
}
#endif /* ML_FIXED_POINT */


//////////////////////////////////////////////////////////////////////////
//  Write out the lookup table for use in fixed point reciprocal.
//////////////////////////////////////////////////////////////////////////

#ifdef WRITE_LUT

#include <stdio.h>

void writeLUT( int length, int shift )
{
    unsigned long *lut = new unsigned long[length];
    int i;
    float x;
    MlScalar scalar;

    float lenRecip = 1.0f/length;

    for (i=0; i<length; i++) {
        x = (float)(1.0f + lenRecip * i);
        scalar = mlFloatToScalar((float)(1.0f / x));
        lut[i] = mlScalarGetValue(scalar);
    }

    printf( "static unsigned long recipLUT[] = { \n\t" );
    for (i=0; i<length-1; i++) {
        printf("0x%lx, ", lut[i]>>shift);
        if (7 == (i % 8)) {
            printf("\n\t");
        }
    }
    printf("0x%lx", lut[length-1]>>shift);
    printf( "\n};\n" );

    return;
}


int main ()
{
    printf("#if ML_FIXED_RADIX == %d\n", 16);
    writeLUT( 1 << INDEX_NBITS, 16-16);
    printf("#else\n#if ML_FIXED_RADIX == %d\n", 12);
    writeLUT( 1 << INDEX_NBITS, 16-12);
    printf("#endif\n#endif\n");    

    return 0;
}

#endif /* WRITE_LUT */


//////////////////////////////////////////////////////////////////////////
//  Test the recip table itself
//////////////////////////////////////////////////////////////////////////

#ifdef TEST_RECIP_TABLE

#include <stdio.h>
#include <math.h>

int main ()
{
    int i, N;
    float x, rx;
    float e;
    float err;
    float xerr;

    MlScalar mltab;
    float tabx;

    N = 100;
    printf("Testing Recip Table\n", N);
//    printf("x     1/x    LUT[x]  err\n");
    N = sizeof(recipLUT)/sizeof(unsigned long);
    err = 0.0f;
    for (i=0; i<N; i++) {
        x = 1.0f + (i / (float)N);
        rx = 1.0f / x;
        mltab = mlScalarSetValue(recipLUT[i]);
        tabx = mlScalarToFloat(mltab);
        e = fabsf(rx-tabx);
//        printf("%10.8f %10.8f %10.8f %10.8f %10.8f\n", 
//               x, rx, tabx, e);
        if (e > err) {
            err = e;
            xerr = x;
        }
    }

    if (err != 0.0f) {
        printf("Max recip([1..2]) error of %f at %f.\n", err, xerr);
    }
    else {
        printf("Max recip([1..2]) error == 0.0f\n");
    }
    return 0;
}

#endif /* TEST_RECIP_TABLE */


//////////////////////////////////////////////////////////////////////////
//  Test the recip function
//////////////////////////////////////////////////////////////////////////

#ifdef TEST_RECIP

#include <stdio.h>
#include <math.h>

int main ()
{
    int i, N, pow;
    float x, rx, mlrx, xpow;
    MlScalar fx, tmp;
    float e;
    float err;
    float xerr;

    N = 100;
    err = 0.0f;
    printf("Testing %d numbers\n", N);
//    printf("x          1/x        FixedReciprocal(x)   err\n");
    for (pow = -10; pow < 11 ; pow++) {
        xpow = (float)(pow >= 0) ? (1 << pow) : (1.0f / (1<<-pow));
        for (i=-N; i<=N; i++) {
            x = (float)(i / (float)N) * xpow;
            fx = mlFloatToScalar(x);
            rx = 1.0f / mlScalarToFloat(fx);
            if (fx == ML_SCALAR_ZERO || mlAbs(fx) == ML_SCALAR_EPSILON) {
                if (x != 0.0)
                    printf("Skipping reciprocal of %f.\n", x );
                continue;
            }
            tmp = FixedReciprocal(fx);
            mlrx = mlScalarToFloat(tmp);
            e = fabsf(rx-mlrx);
//            printf("%10.8f %10.8f %10.8f %10.8f\n", 
//                   x, rx, mlrx, e);
            if (e > err) {
                err = e;
                xerr = x;
            }
        }
    }

    if (err != 0.0f) {
        printf("Max recip([-1..1]*2^[-10..10]) error of %f at %f.\n", err, xerr);
    }
    else {
        printf("Max recip([-1..1]*2^[-10..10]) error == 0.0f\n");
    }


    return 0;
}

#endif /* TEST_RECIP */
