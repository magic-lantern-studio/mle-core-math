
// COPYRIGHT_BEGIN
//
// The MIT License (MIT)
//
// Copyright (c) 2015-2020 Wizzer Works
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//  For information concerning this source file, contact Mark S. Millard,
//  of Wizzer Works at msm@wizzerworks.com.
//
//  More information concerning Wizzer Works may be found at
//
//      http://www.wizzerworks.com
//
// COPYRIGHT_END

// include Magic Lantern math header files
#include "math/scalar.h"
#include "math/sine.h"
#include "mle/mlAssert.h"

#if ML_FIXED_POINT
//
//          |       .  .
//          |   .         .
//          | .             .
//          |.               .
//   -------+-----------------+-----------------+---
//          |                  .               .
//          |                   .             .
//          |                     .         .
//          |        |        |       .| .      |
//          |  0x00  |  0x01  |  0x10  |  0x11  |
//            
//
// Compute sin() and cos() in fixed point by using a lookup
// table.  Our MlAngle type uses hex 1.0000 to represent 2PI
// radians (one revolution), so we can use the first 2 bits of
// the fraction to decide which symmetric part of the sine wave to
// deal with.  Then use the remaining D-2 bits in one of these ways
// to calculate the sine/cosine:
//    1) D-2 bit lookup table to give exact values.
//    2) n<D-2 bit lookup table to give nearby value, then add
//        remainder (D-2-n bits) times the slope to interpolate.
//        a) compute slope by another lookup and subtraction
//        b) store value & slope in lookup table
//
// Because f(x) = f(x_T) + d*f\'(x_T) + 0.5 d*d*f\'\'(x~),
// where d = x-x_T  and x~ in [x..x_T], we can bound the error on a table
// lookup and slope-based interpolation by 0.5*d*d*f\'\'(x).  With sin/cos
// the |f\'\'(x)| <=1, so error <= 0.5*d*d.  Of course, we\'re taking the
// secant of f in method (2a), not the slope.  With L bins in the lookup
// table (to cover PI/2 radians), d <= PI/2L, so error <= PI^2/8L^2, approx
// 1/LL.  We only need D bits of precision (I.D format), so L should 
// be 2^(D/2).  For 16.16 that means L has an 8-bit index, while for 20.12 it 
// means 6-bit index.  Add one more bit of index to reduce error, then 
// use the D-2-logL bits for remainder multiplication times the slope.
//
// If angle a=.00BBB, then lookup BBB in table. 
// If angle a=.01BBB, then lookup (.01 - .00BBB)==(.10 - a)
// If angle a=.10BBB, then lookup BBB and negate result.
// If angle a=.11BBB, then lookup (.01 - .00BBB)==(1. - a) and negate result.

#ifdef WRITE_LUT
static long sineLUT[] = { 1,2,3,4 };

#else  /* WRITE_LUT */

// Insert auto-generated LUT here...

#if ML_FIXED_RADIX == 16
static long sineLUT[] = { 
    0x0, 0x64, 0xc9, 0x12d, 0x192, 0x1f6, 0x25b, 0x2bf, 
    0x324, 0x388, 0x3ed, 0x451, 0x4b6, 0x51a, 0x57f, 0x5e3, 
    0x648, 0x6ac, 0x711, 0x775, 0x7da, 0x83e, 0x8a3, 0x907, 
    0x96c, 0x9d0, 0xa35, 0xa99, 0xafe, 0xb62, 0xbc6, 0xc2b, 
    0xc8f, 0xcf4, 0xd58, 0xdbc, 0xe21, 0xe85, 0xeea, 0xf4e, 
    0xfb2, 0x1017, 0x107b, 0x10df, 0x1144, 0x11a8, 0x120c, 0x1270, 
    0x12d5, 0x1339, 0x139d, 0x1401, 0x1466, 0x14ca, 0x152e, 0x1592, 
    0x15f6, 0x165a, 0x16bf, 0x1723, 0x1787, 0x17eb, 0x184f, 0x18b3, 
    0x1917, 0x197b, 0x19df, 0x1a43, 0x1aa7, 0x1b0b, 0x1b6f, 0x1bd3, 
    0x1c37, 0x1c9b, 0x1cff, 0x1d63, 0x1dc7, 0x1e2a, 0x1e8e, 0x1ef2, 
    0x1f56, 0x1fba, 0x201d, 0x2081, 0x20e5, 0x2148, 0x21ac, 0x2210, 
    0x2273, 0x22d7, 0x233b, 0x239e, 0x2402, 0x2465, 0x24c9, 0x252c, 
    0x2590, 0x25f3, 0x2656, 0x26ba, 0x271d, 0x2781, 0x27e4, 0x2847, 
    0x28aa, 0x290e, 0x2971, 0x29d4, 0x2a37, 0x2a9a, 0x2afe, 0x2b61, 
    0x2bc4, 0x2c27, 0x2c8a, 0x2ced, 0x2d50, 0x2db3, 0x2e15, 0x2e78, 
    0x2edb, 0x2f3e, 0x2fa1, 0x3004, 0x3066, 0x30c9, 0x312c, 0x318e, 
    0x31f1, 0x3254, 0x32b6, 0x3319, 0x337b, 0x33de, 0x3440, 0x34a2, 
    0x3505, 0x3567, 0x35c9, 0x362c, 0x368e, 0x36f0, 0x3752, 0x37b4, 
    0x3817, 0x3879, 0x38db, 0x393d, 0x399f, 0x3a01, 0x3a62, 0x3ac4, 
    0x3b26, 0x3b88, 0x3bea, 0x3c4b, 0x3cad, 0x3d0f, 0x3d70, 0x3dd2, 
    0x3e33, 0x3e95, 0x3ef6, 0x3f58, 0x3fb9, 0x401b, 0x407c, 0x40dd, 
    0x413e, 0x41a0, 0x4201, 0x4262, 0x42c3, 0x4324, 0x4385, 0x43e6, 
    0x4447, 0x44a8, 0x4508, 0x4569, 0x45ca, 0x462b, 0x468b, 0x46ec, 
    0x474d, 0x47ad, 0x480e, 0x486e, 0x48ce, 0x492f, 0x498f, 0x49ef, 
    0x4a50, 0x4ab0, 0x4b10, 0x4b70, 0x4bd0, 0x4c30, 0x4c90, 0x4cf0, 
    0x4d50, 0x4db0, 0x4e0f, 0x4e6f, 0x4ecf, 0x4f2e, 0x4f8e, 0x4fed, 
    0x504d, 0x50ac, 0x510c, 0x516b, 0x51ca, 0x522a, 0x5289, 0x52e8, 
    0x5347, 0x53a6, 0x5405, 0x5464, 0x54c3, 0x5522, 0x5581, 0x55df, 
    0x563e, 0x569d, 0x56fb, 0x575a, 0x57b8, 0x5817, 0x5875, 0x58d3, 
    0x5931, 0x5990, 0x59ee, 0x5a4c, 0x5aaa, 0x5b08, 0x5b66, 0x5bc4, 
    0x5c22, 0x5c7f, 0x5cdd, 0x5d3b, 0x5d98, 0x5df6, 0x5e53, 0x5eb1, 
    0x5f0e, 0x5f6b, 0x5fc9, 0x6026, 0x6083, 0x60e0, 0x613d, 0x619a, 
    0x61f7, 0x6254, 0x62b1, 0x630d, 0x636a, 0x63c7, 0x6423, 0x6480, 
    0x64dc, 0x6539, 0x6595, 0x65f1, 0x664d, 0x66a9, 0x6705, 0x6761, 
    0x67bd, 0x6819, 0x6875, 0x68d1, 0x692d, 0x6988, 0x69e4, 0x6a3f, 
    0x6a9b, 0x6af6, 0x6b51, 0x6bad, 0x6c08, 0x6c63, 0x6cbe, 0x6d19, 
    0x6d74, 0x6dcf, 0x6e29, 0x6e84, 0x6edf, 0x6f39, 0x6f94, 0x6fee, 
    0x7049, 0x70a3, 0x70fd, 0x7157, 0x71b1, 0x720c, 0x7265, 0x72bf, 
    0x7319, 0x7373, 0x73cd, 0x7426, 0x7480, 0x74d9, 0x7533, 0x758c, 
    0x75e5, 0x763f, 0x7698, 0x76f1, 0x774a, 0x77a3, 0x77fb, 0x7854, 
    0x78ad, 0x7906, 0x795e, 0x79b7, 0x7a0f, 0x7a67, 0x7ac0, 0x7b18, 
    0x7b70, 0x7bc8, 0x7c20, 0x7c78, 0x7cd0, 0x7d27, 0x7d7f, 0x7dd7, 
    0x7e2e, 0x7e86, 0x7edd, 0x7f34, 0x7f8b, 0x7fe2, 0x803a, 0x8090, 
    0x80e7, 0x813e, 0x8195, 0x81ec, 0x8242, 0x8299, 0x82ef, 0x8345, 
    0x839c, 0x83f2, 0x8448, 0x849e, 0x84f4, 0x854a, 0x85a0, 0x85f5, 
    0x864b, 0x86a1, 0x86f6, 0x874b, 0x87a1, 0x87f6, 0x884b, 0x88a0, 
    0x88f5, 0x894a, 0x899f, 0x89f4, 0x8a48, 0x8a9d, 0x8af1, 0x8b46, 
    0x8b9a, 0x8bee, 0x8c42, 0x8c96, 0x8cea, 0x8d3e, 0x8d92, 0x8de6, 
    0x8e39, 0x8e8d, 0x8ee0, 0x8f34, 0x8f87, 0x8fda, 0x902d, 0x9080, 
    0x90d3, 0x9126, 0x9179, 0x91cc, 0x921e, 0x9271, 0x92c3, 0x9315, 
    0x9368, 0x93ba, 0x940c, 0x945e, 0x94b0, 0x9502, 0x9553, 0x95a5, 
    0x95f6, 0x9648, 0x9699, 0x96ea, 0x973c, 0x978d, 0x97de, 0x982e, 
    0x987f, 0x98d0, 0x9921, 0x9971, 0x99c2, 0x9a12, 0x9a62, 0x9ab2, 
    0x9b02, 0x9b52, 0x9ba2, 0x9bf2, 0x9c42, 0x9c91, 0x9ce1, 0x9d30, 
    0x9d7f, 0x9dcf, 0x9e1e, 0x9e6d, 0x9ebc, 0x9f0a, 0x9f59, 0x9fa8, 
    0x9ff6, 0xa045, 0xa093, 0xa0e1, 0xa12f, 0xa17e, 0xa1cb, 0xa219, 
    0xa267, 0xa2b5, 0xa302, 0xa350, 0xa39d, 0xa3ea, 0xa438, 0xa485, 
    0xa4d2, 0xa51f, 0xa56b, 0xa5b8, 0xa605, 0xa651, 0xa69d, 0xa6ea, 
    0xa736, 0xa782, 0xa7ce, 0xa81a, 0xa866, 0xa8b1, 0xa8fd, 0xa948, 
    0xa994, 0xa9df, 0xaa2a, 0xaa75, 0xaac0, 0xab0b, 0xab56, 0xaba0, 
    0xabeb, 0xac35, 0xac80, 0xacca, 0xad14, 0xad5e, 0xada8, 0xadf2, 
    0xae3b, 0xae85, 0xaece, 0xaf18, 0xaf61, 0xafaa, 0xaff3, 0xb03c, 
    0xb085, 0xb0ce, 0xb117, 0xb15f, 0xb1a8, 0xb1f0, 0xb238, 0xb280, 
    0xb2c8, 0xb310, 0xb358, 0xb3a0, 0xb3e7, 0xb42f, 0xb476, 0xb4bd, 
    0xb504, 0xb54b, 0xb592, 0xb5d9, 0xb620, 0xb667, 0xb6ad, 0xb6f3, 
    0xb73a, 0xb780, 0xb7c6, 0xb80c, 0xb852, 0xb897, 0xb8dd, 0xb922, 
    0xb968, 0xb9ad, 0xb9f2, 0xba37, 0xba7c, 0xbac1, 0xbb06, 0xbb4a, 
    0xbb8f, 0xbbd3, 0xbc17, 0xbc5b, 0xbca0, 0xbce3, 0xbd27, 0xbd6b, 
    0xbdae, 0xbdf2, 0xbe35, 0xbe78, 0xbebc, 0xbeff, 0xbf41, 0xbf84, 
    0xbfc7, 0xc009, 0xc04c, 0xc08e, 0xc0d0, 0xc112, 0xc154, 0xc196, 
    0xc1d8, 0xc21a, 0xc25b, 0xc29c, 0xc2de, 0xc31f, 0xc360, 0xc3a1, 
    0xc3e2, 0xc422, 0xc463, 0xc4a3, 0xc4e3, 0xc524, 0xc564, 0xc5a4, 
    0xc5e4, 0xc623, 0xc663, 0xc6a2, 0xc6e2, 0xc721, 0xc760, 0xc79f, 
    0xc7de, 0xc81d, 0xc85b, 0xc89a, 0xc8d8, 0xc916, 0xc955, 0xc993, 
    0xc9d1, 0xca0e, 0xca4c, 0xca8a, 0xcac7, 0xcb04, 0xcb41, 0xcb7f, 
    0xcbbb, 0xcbf8, 0xcc35, 0xcc72, 0xccae, 0xccea, 0xcd26, 0xcd63, 
    0xcd9f, 0xcdda, 0xce16, 0xce52, 0xce8d, 0xcec8, 0xcf04, 0xcf3f, 
    0xcf7a, 0xcfb4, 0xcfef, 0xd02a, 0xd064, 0xd09f, 0xd0d9, 0xd113, 
    0xd14d, 0xd187, 0xd1c0, 0xd1fa, 0xd233, 0xd26d, 0xd2a6, 0xd2df, 
    0xd318, 0xd351, 0xd389, 0xd3c2, 0xd3fa, 0xd433, 0xd46b, 0xd4a3, 
    0xd4db, 0xd512, 0xd54a, 0xd582, 0xd5b9, 0xd5f0, 0xd627, 0xd65f, 
    0xd695, 0xd6cc, 0xd703, 0xd739, 0xd770, 0xd7a6, 0xd7dc, 0xd812, 
    0xd848, 0xd87e, 0xd8b3, 0xd8e9, 0xd91e, 0xd953, 0xd988, 0xd9bd, 
    0xd9f2, 0xda27, 0xda5b, 0xda90, 0xdac4, 0xdaf8, 0xdb2c, 0xdb60, 
    0xdb94, 0xdbc7, 0xdbfb, 0xdc2e, 0xdc61, 0xdc94, 0xdcc7, 0xdcfa, 
    0xdd2d, 0xdd5f, 0xdd92, 0xddc4, 0xddf6, 0xde28, 0xde5a, 0xde8c, 
    0xdebe, 0xdeef, 0xdf20, 0xdf52, 0xdf83, 0xdfb4, 0xdfe4, 0xe015, 
    0xe046, 0xe076, 0xe0a6, 0xe0d6, 0xe106, 0xe136, 0xe166, 0xe196, 
    0xe1c5, 0xe1f4, 0xe224, 0xe253, 0xe282, 0xe2b0, 0xe2df, 0xe30d, 
    0xe33c, 0xe36a, 0xe398, 0xe3c6, 0xe3f4, 0xe422, 0xe44f, 0xe47d, 
    0xe4aa, 0xe4d7, 0xe504, 0xe531, 0xe55e, 0xe58a, 0xe5b7, 0xe5e3, 
    0xe60f, 0xe63b, 0xe667, 0xe693, 0xe6be, 0xe6ea, 0xe715, 0xe740, 
    0xe76b, 0xe796, 0xe7c1, 0xe7ec, 0xe816, 0xe841, 0xe86b, 0xe895, 
    0xe8bf, 0xe8e9, 0xe912, 0xe93c, 0xe965, 0xe98e, 0xe9b7, 0xe9e0, 
    0xea09, 0xea32, 0xea5a, 0xea83, 0xeaab, 0xead3, 0xeafb, 0xeb23, 
    0xeb4b, 0xeb72, 0xeb99, 0xebc1, 0xebe8, 0xec0f, 0xec36, 0xec5c, 
    0xec83, 0xeca9, 0xecd0, 0xecf6, 0xed1c, 0xed41, 0xed67, 0xed8d, 
    0xedb2, 0xedd7, 0xedfc, 0xee21, 0xee46, 0xee6b, 0xee8f, 0xeeb4, 
    0xeed8, 0xeefc, 0xef20, 0xef44, 0xef68, 0xef8b, 0xefaf, 0xefd2, 
    0xeff5, 0xf018, 0xf03b, 0xf05d, 0xf080, 0xf0a2, 0xf0c5, 0xf0e7, 
    0xf109, 0xf12a, 0xf14c, 0xf16d, 0xf18f, 0xf1b0, 0xf1d1, 0xf1f2, 
    0xf213, 0xf233, 0xf254, 0xf274, 0xf294, 0xf2b5, 0xf2d4, 0xf2f4, 
    0xf314, 0xf333, 0xf353, 0xf372, 0xf391, 0xf3b0, 0xf3ce, 0xf3ed, 
    0xf40b, 0xf42a, 0xf448, 0xf466, 0xf484, 0xf4a1, 0xf4bf, 0xf4dc, 
    0xf4fa, 0xf517, 0xf534, 0xf550, 0xf56d, 0xf58a, 0xf5a6, 0xf5c2, 
    0xf5de, 0xf5fa, 0xf616, 0xf632, 0xf64d, 0xf668, 0xf684, 0xf69f, 
    0xf6ba, 0xf6d4, 0xf6ef, 0xf709, 0xf724, 0xf73e, 0xf758, 0xf772, 
    0xf78b, 0xf7a5, 0xf7be, 0xf7d7, 0xf7f1, 0xf80a, 0xf822, 0xf83b, 
    0xf853, 0xf86c, 0xf884, 0xf89c, 0xf8b4, 0xf8cc, 0xf8e3, 0xf8fb, 
    0xf912, 0xf929, 0xf940, 0xf957, 0xf96e, 0xf984, 0xf99b, 0xf9b1, 
    0xf9c7, 0xf9dd, 0xf9f3, 0xfa09, 0xfa1e, 0xfa33, 0xfa49, 0xfa5e, 
    0xfa73, 0xfa87, 0xfa9c, 0xfab0, 0xfac5, 0xfad9, 0xfaed, 0xfb01, 
    0xfb14, 0xfb28, 0xfb3b, 0xfb4e, 0xfb61, 0xfb74, 0xfb87, 0xfb9a, 
    0xfbac, 0xfbbf, 0xfbd1, 0xfbe3, 0xfbf5, 0xfc06, 0xfc18, 0xfc29, 
    0xfc3b, 0xfc4c, 0xfc5d, 0xfc6e, 0xfc7e, 0xfc8f, 0xfc9f, 0xfcaf, 
    0xfcbf, 0xfccf, 0xfcdf, 0xfcef, 0xfcfe, 0xfd0d, 0xfd1c, 0xfd2b, 
    0xfd3a, 0xfd49, 0xfd57, 0xfd66, 0xfd74, 0xfd82, 0xfd90, 0xfd9e, 
    0xfdab, 0xfdb9, 0xfdc6, 0xfdd3, 0xfde0, 0xfded, 0xfdfa, 0xfe06, 
    0xfe13, 0xfe1f, 0xfe2b, 0xfe37, 0xfe43, 0xfe4e, 0xfe5a, 0xfe65, 
    0xfe70, 0xfe7b, 0xfe86, 0xfe91, 0xfe9b, 0xfea6, 0xfeb0, 0xfeba, 
    0xfec4, 0xfece, 0xfed7, 0xfee1, 0xfeea, 0xfef3, 0xfefc, 0xff05, 
    0xff0e, 0xff16, 0xff1f, 0xff27, 0xff2f, 0xff37, 0xff3f, 0xff46, 
    0xff4e, 0xff55, 0xff5c, 0xff63, 0xff6a, 0xff71, 0xff78, 0xff7e, 
    0xff84, 0xff8a, 0xff90, 0xff96, 0xff9c, 0xffa1, 0xffa6, 0xffac, 
    0xffb1, 0xffb5, 0xffba, 0xffbf, 0xffc3, 0xffc7, 0xffcb, 0xffcf, 
    0xffd3, 0xffd7, 0xffda, 0xffde, 0xffe1, 0xffe4, 0xffe7, 0xffe9, 
    0xffec, 0xffee, 0xfff0, 0xfff2, 0xfff4, 0xfff6, 0xfff8, 0xfff9, 
    0xfffb, 0xfffc, 0xfffd, 0xfffe, 0xfffe, 0xffff, 0xffff, 0xffff, 
    0x10000
};
#else
#if ML_FIXED_RADIX == 12
static long sineLUT[] = { 
    0x0, 0x6, 0xc, 0x12, 0x19, 0x1f, 0x25, 0x2b, 
    0x32, 0x38, 0x3e, 0x45, 0x4b, 0x51, 0x57, 0x5e, 
    0x64, 0x6a, 0x71, 0x77, 0x7d, 0x83, 0x8a, 0x90, 
    0x96, 0x9d, 0xa3, 0xa9, 0xaf, 0xb6, 0xbc, 0xc2, 
    0xc8, 0xcf, 0xd5, 0xdb, 0xe2, 0xe8, 0xee, 0xf4, 
    0xfb, 0x101, 0x107, 0x10d, 0x114, 0x11a, 0x120, 0x127, 
    0x12d, 0x133, 0x139, 0x140, 0x146, 0x14c, 0x152, 0x159, 
    0x15f, 0x165, 0x16b, 0x172, 0x178, 0x17e, 0x184, 0x18b, 
    0x191, 0x197, 0x19d, 0x1a4, 0x1aa, 0x1b0, 0x1b6, 0x1bd, 
    0x1c3, 0x1c9, 0x1cf, 0x1d6, 0x1dc, 0x1e2, 0x1e8, 0x1ef, 
    0x1f5, 0x1fb, 0x201, 0x208, 0x20e, 0x214, 0x21a, 0x221, 
    0x227, 0x22d, 0x233, 0x239, 0x240, 0x246, 0x24c, 0x252, 
    0x259, 0x25f, 0x265, 0x26b, 0x271, 0x278, 0x27e, 0x284, 
    0x28a, 0x290, 0x297, 0x29d, 0x2a3, 0x2a9, 0x2af, 0x2b6, 
    0x2bc, 0x2c2, 0x2c8, 0x2ce, 0x2d5, 0x2db, 0x2e1, 0x2e7, 
    0x2ed, 0x2f3, 0x2fa, 0x300, 0x306, 0x30c, 0x312, 0x318, 
    0x31f, 0x325, 0x32b, 0x331, 0x337, 0x33d, 0x344, 0x34a, 
    0x350, 0x356, 0x35c, 0x362, 0x368, 0x36f, 0x375, 0x37b, 
    0x381, 0x387, 0x38d, 0x393, 0x399, 0x3a0, 0x3a6, 0x3ac, 
    0x3b2, 0x3b8, 0x3be, 0x3c4, 0x3ca, 0x3d0, 0x3d7, 0x3dd, 
    0x3e3, 0x3e9, 0x3ef, 0x3f5, 0x3fb, 0x401, 0x407, 0x40d, 
    0x413, 0x41a, 0x420, 0x426, 0x42c, 0x432, 0x438, 0x43e, 
    0x444, 0x44a, 0x450, 0x456, 0x45c, 0x462, 0x468, 0x46e, 
    0x474, 0x47a, 0x480, 0x486, 0x48c, 0x492, 0x498, 0x49e, 
    0x4a5, 0x4ab, 0x4b1, 0x4b7, 0x4bd, 0x4c3, 0x4c9, 0x4cf, 
    0x4d5, 0x4db, 0x4e0, 0x4e6, 0x4ec, 0x4f2, 0x4f8, 0x4fe, 
    0x504, 0x50a, 0x510, 0x516, 0x51c, 0x522, 0x528, 0x52e, 
    0x534, 0x53a, 0x540, 0x546, 0x54c, 0x552, 0x558, 0x55d, 
    0x563, 0x569, 0x56f, 0x575, 0x57b, 0x581, 0x587, 0x58d, 
    0x593, 0x599, 0x59e, 0x5a4, 0x5aa, 0x5b0, 0x5b6, 0x5bc, 
    0x5c2, 0x5c7, 0x5cd, 0x5d3, 0x5d9, 0x5df, 0x5e5, 0x5eb, 
    0x5f0, 0x5f6, 0x5fc, 0x602, 0x608, 0x60e, 0x613, 0x619, 
    0x61f, 0x625, 0x62b, 0x630, 0x636, 0x63c, 0x642, 0x648, 
    0x64d, 0x653, 0x659, 0x65f, 0x664, 0x66a, 0x670, 0x676, 
    0x67b, 0x681, 0x687, 0x68d, 0x692, 0x698, 0x69e, 0x6a3, 
    0x6a9, 0x6af, 0x6b5, 0x6ba, 0x6c0, 0x6c6, 0x6cb, 0x6d1, 
    0x6d7, 0x6dc, 0x6e2, 0x6e8, 0x6ed, 0x6f3, 0x6f9, 0x6fe, 
    0x704, 0x70a, 0x70f, 0x715, 0x71b, 0x720, 0x726, 0x72b, 
    0x731, 0x737, 0x73c, 0x742, 0x748, 0x74d, 0x753, 0x758, 
    0x75e, 0x763, 0x769, 0x76f, 0x774, 0x77a, 0x77f, 0x785, 
    0x78a, 0x790, 0x795, 0x79b, 0x7a0, 0x7a6, 0x7ac, 0x7b1, 
    0x7b7, 0x7bc, 0x7c2, 0x7c7, 0x7cd, 0x7d2, 0x7d7, 0x7dd, 
    0x7e2, 0x7e8, 0x7ed, 0x7f3, 0x7f8, 0x7fe, 0x803, 0x809, 
    0x80e, 0x813, 0x819, 0x81e, 0x824, 0x829, 0x82e, 0x834, 
    0x839, 0x83f, 0x844, 0x849, 0x84f, 0x854, 0x85a, 0x85f, 
    0x864, 0x86a, 0x86f, 0x874, 0x87a, 0x87f, 0x884, 0x88a, 
    0x88f, 0x894, 0x899, 0x89f, 0x8a4, 0x8a9, 0x8af, 0x8b4, 
    0x8b9, 0x8be, 0x8c4, 0x8c9, 0x8ce, 0x8d3, 0x8d9, 0x8de, 
    0x8e3, 0x8e8, 0x8ee, 0x8f3, 0x8f8, 0x8fd, 0x902, 0x908, 
    0x90d, 0x912, 0x917, 0x91c, 0x921, 0x927, 0x92c, 0x931, 
    0x936, 0x93b, 0x940, 0x945, 0x94b, 0x950, 0x955, 0x95a, 
    0x95f, 0x964, 0x969, 0x96e, 0x973, 0x978, 0x97d, 0x982, 
    0x987, 0x98d, 0x992, 0x997, 0x99c, 0x9a1, 0x9a6, 0x9ab, 
    0x9b0, 0x9b5, 0x9ba, 0x9bf, 0x9c4, 0x9c9, 0x9ce, 0x9d3, 
    0x9d7, 0x9dc, 0x9e1, 0x9e6, 0x9eb, 0x9f0, 0x9f5, 0x9fa, 
    0x9ff, 0xa04, 0xa09, 0xa0e, 0xa12, 0xa17, 0xa1c, 0xa21, 
    0xa26, 0xa2b, 0xa30, 0xa35, 0xa39, 0xa3e, 0xa43, 0xa48, 
    0xa4d, 0xa51, 0xa56, 0xa5b, 0xa60, 0xa65, 0xa69, 0xa6e, 
    0xa73, 0xa78, 0xa7c, 0xa81, 0xa86, 0xa8b, 0xa8f, 0xa94, 
    0xa99, 0xa9d, 0xaa2, 0xaa7, 0xaac, 0xab0, 0xab5, 0xaba, 
    0xabe, 0xac3, 0xac8, 0xacc, 0xad1, 0xad5, 0xada, 0xadf, 
    0xae3, 0xae8, 0xaec, 0xaf1, 0xaf6, 0xafa, 0xaff, 0xb03, 
    0xb08, 0xb0c, 0xb11, 0xb15, 0xb1a, 0xb1f, 0xb23, 0xb28, 
    0xb2c, 0xb31, 0xb35, 0xb3a, 0xb3e, 0xb42, 0xb47, 0xb4b, 
    0xb50, 0xb54, 0xb59, 0xb5d, 0xb62, 0xb66, 0xb6a, 0xb6f, 
    0xb73, 0xb78, 0xb7c, 0xb80, 0xb85, 0xb89, 0xb8d, 0xb92, 
    0xb96, 0xb9a, 0xb9f, 0xba3, 0xba7, 0xbac, 0xbb0, 0xbb4, 
    0xbb8, 0xbbd, 0xbc1, 0xbc5, 0xbca, 0xbce, 0xbd2, 0xbd6, 
    0xbda, 0xbdf, 0xbe3, 0xbe7, 0xbeb, 0xbef, 0xbf4, 0xbf8, 
    0xbfc, 0xc00, 0xc04, 0xc08, 0xc0d, 0xc11, 0xc15, 0xc19, 
    0xc1d, 0xc21, 0xc25, 0xc29, 0xc2d, 0xc31, 0xc36, 0xc3a, 
    0xc3e, 0xc42, 0xc46, 0xc4a, 0xc4e, 0xc52, 0xc56, 0xc5a, 
    0xc5e, 0xc62, 0xc66, 0xc6a, 0xc6e, 0xc72, 0xc76, 0xc79, 
    0xc7d, 0xc81, 0xc85, 0xc89, 0xc8d, 0xc91, 0xc95, 0xc99, 
    0xc9d, 0xca0, 0xca4, 0xca8, 0xcac, 0xcb0, 0xcb4, 0xcb7, 
    0xcbb, 0xcbf, 0xcc3, 0xcc7, 0xcca, 0xcce, 0xcd2, 0xcd6, 
    0xcd9, 0xcdd, 0xce1, 0xce5, 0xce8, 0xcec, 0xcf0, 0xcf3, 
    0xcf7, 0xcfb, 0xcfe, 0xd02, 0xd06, 0xd09, 0xd0d, 0xd11, 
    0xd14, 0xd18, 0xd1c, 0xd1f, 0xd23, 0xd26, 0xd2a, 0xd2d, 
    0xd31, 0xd35, 0xd38, 0xd3c, 0xd3f, 0xd43, 0xd46, 0xd4a, 
    0xd4d, 0xd51, 0xd54, 0xd58, 0xd5b, 0xd5f, 0xd62, 0xd65, 
    0xd69, 0xd6c, 0xd70, 0xd73, 0xd77, 0xd7a, 0xd7d, 0xd81, 
    0xd84, 0xd87, 0xd8b, 0xd8e, 0xd91, 0xd95, 0xd98, 0xd9b, 
    0xd9f, 0xda2, 0xda5, 0xda9, 0xdac, 0xdaf, 0xdb2, 0xdb6, 
    0xdb9, 0xdbc, 0xdbf, 0xdc2, 0xdc6, 0xdc9, 0xdcc, 0xdcf, 
    0xdd2, 0xdd5, 0xdd9, 0xddc, 0xddf, 0xde2, 0xde5, 0xde8, 
    0xdeb, 0xdee, 0xdf2, 0xdf5, 0xdf8, 0xdfb, 0xdfe, 0xe01, 
    0xe04, 0xe07, 0xe0a, 0xe0d, 0xe10, 0xe13, 0xe16, 0xe19, 
    0xe1c, 0xe1f, 0xe22, 0xe25, 0xe28, 0xe2b, 0xe2d, 0xe30, 
    0xe33, 0xe36, 0xe39, 0xe3c, 0xe3f, 0xe42, 0xe44, 0xe47, 
    0xe4a, 0xe4d, 0xe50, 0xe53, 0xe55, 0xe58, 0xe5b, 0xe5e, 
    0xe60, 0xe63, 0xe66, 0xe69, 0xe6b, 0xe6e, 0xe71, 0xe74, 
    0xe76, 0xe79, 0xe7c, 0xe7e, 0xe81, 0xe84, 0xe86, 0xe89, 
    0xe8b, 0xe8e, 0xe91, 0xe93, 0xe96, 0xe98, 0xe9b, 0xe9e, 
    0xea0, 0xea3, 0xea5, 0xea8, 0xeaa, 0xead, 0xeaf, 0xeb2, 
    0xeb4, 0xeb7, 0xeb9, 0xebc, 0xebe, 0xec0, 0xec3, 0xec5, 
    0xec8, 0xeca, 0xecd, 0xecf, 0xed1, 0xed4, 0xed6, 0xed8, 
    0xedb, 0xedd, 0xedf, 0xee2, 0xee4, 0xee6, 0xee8, 0xeeb, 
    0xeed, 0xeef, 0xef2, 0xef4, 0xef6, 0xef8, 0xefa, 0xefd, 
    0xeff, 0xf01, 0xf03, 0xf05, 0xf08, 0xf0a, 0xf0c, 0xf0e, 
    0xf10, 0xf12, 0xf14, 0xf16, 0xf18, 0xf1b, 0xf1d, 0xf1f, 
    0xf21, 0xf23, 0xf25, 0xf27, 0xf29, 0xf2b, 0xf2d, 0xf2f, 
    0xf31, 0xf33, 0xf35, 0xf37, 0xf39, 0xf3b, 0xf3c, 0xf3e, 
    0xf40, 0xf42, 0xf44, 0xf46, 0xf48, 0xf4a, 0xf4b, 0xf4d, 
    0xf4f, 0xf51, 0xf53, 0xf55, 0xf56, 0xf58, 0xf5a, 0xf5c, 
    0xf5d, 0xf5f, 0xf61, 0xf63, 0xf64, 0xf66, 0xf68, 0xf69, 
    0xf6b, 0xf6d, 0xf6e, 0xf70, 0xf72, 0xf73, 0xf75, 0xf77, 
    0xf78, 0xf7a, 0xf7b, 0xf7d, 0xf7f, 0xf80, 0xf82, 0xf83, 
    0xf85, 0xf86, 0xf88, 0xf89, 0xf8b, 0xf8c, 0xf8e, 0xf8f, 
    0xf91, 0xf92, 0xf94, 0xf95, 0xf96, 0xf98, 0xf99, 0xf9b, 
    0xf9c, 0xf9d, 0xf9f, 0xfa0, 0xfa1, 0xfa3, 0xfa4, 0xfa5, 
    0xfa7, 0xfa8, 0xfa9, 0xfab, 0xfac, 0xfad, 0xfae, 0xfb0, 
    0xfb1, 0xfb2, 0xfb3, 0xfb4, 0xfb6, 0xfb7, 0xfb8, 0xfb9, 
    0xfba, 0xfbb, 0xfbd, 0xfbe, 0xfbf, 0xfc0, 0xfc1, 0xfc2, 
    0xfc3, 0xfc4, 0xfc5, 0xfc6, 0xfc7, 0xfc8, 0xfc9, 0xfca, 
    0xfcb, 0xfcc, 0xfcd, 0xfce, 0xfcf, 0xfd0, 0xfd1, 0xfd2, 
    0xfd3, 0xfd4, 0xfd5, 0xfd6, 0xfd7, 0xfd8, 0xfd9, 0xfd9, 
    0xfda, 0xfdb, 0xfdc, 0xfdd, 0xfde, 0xfde, 0xfdf, 0xfe0, 
    0xfe1, 0xfe1, 0xfe2, 0xfe3, 0xfe4, 0xfe4, 0xfe5, 0xfe6, 
    0xfe7, 0xfe7, 0xfe8, 0xfe9, 0xfe9, 0xfea, 0xfeb, 0xfeb, 
    0xfec, 0xfec, 0xfed, 0xfee, 0xfee, 0xfef, 0xfef, 0xff0, 
    0xff0, 0xff1, 0xff1, 0xff2, 0xff2, 0xff3, 0xff3, 0xff4, 
    0xff4, 0xff5, 0xff5, 0xff6, 0xff6, 0xff7, 0xff7, 0xff7, 
    0xff8, 0xff8, 0xff9, 0xff9, 0xff9, 0xffa, 0xffa, 0xffa, 
    0xffb, 0xffb, 0xffb, 0xffb, 0xffc, 0xffc, 0xffc, 0xffc, 
    0xffd, 0xffd, 0xffd, 0xffd, 0xffe, 0xffe, 0xffe, 0xffe, 
    0xffe, 0xffe, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
    0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 
    0x1000
};
#endif
#endif
// ... to here.
#endif

#if (ML_FIXED_RADIX == 16)
// 11 bits as .0111111111110000 expect 1st bit to and with 0 except at PI/2
//  4 bits as .0000000000001111
#define INDEX_SHIFT 4
#define INDEX_MASK (0x0000007ff << INDEX_SHIFT)
#define REMDR_MASK (0x00000000f)
#define LUT_LENGTH 1024 /* 1 << 11 */

#else /* (ML_FIXED_RADIX == 16) */

#if (ML_FIXED_RADIX == 12)
// 11 bits as .011111111111 expect 1st bit to and with 0 except at PI/2
//  0 bits as .000000000000
#define INDEX_SHIFT 0
#define INDEX_MASK (0x000007ff << INDEX_SHIFT)
#define REMDR_MASK (0x00000000)
#define LUT_LENGTH 1024 /* 1 << 10 */
#endif /* (ML_FIXED_RADIX == 12) */

#endif /* (ML_FIXED_RADIX == 16) */

#define REMDR_SHIFT (ML_FIXED_RADIX - INDEX_SHIFT)
#define HIGH_TWOBIT_MASK (0x3 << (ML_FIXED_RADIX - 2))
#define ONE_HALF (0x1 << (ML_FIXED_RADIX - 1))
#define ONE_FOURTH (0x1 << (ML_FIXED_RADIX - 2))
#define THREE_FOURTHS (0x11 << (ML_FIXED_RADIX - 2))


static void
sineTableIndex(MlScalar x,
               unsigned long &index,
               unsigned long &remdr,
               unsigned long &sign )
{
    unsigned long a = mlScalarGetValue( x );
    unsigned long highTwoBits = (a & HIGH_TWOBIT_MASK) >> (ML_FIXED_RADIX - 2);

    switch (highTwoBits) {
    case 0x0:
        sign = 0;
        index = (a & INDEX_MASK) >> INDEX_SHIFT;
        remdr = a & REMDR_MASK;
        break;
    case 0x1:
        sign = 0;
        index = ((ONE_HALF - a) & INDEX_MASK) >> INDEX_SHIFT;
        remdr = (ONE_HALF - a) & REMDR_MASK;
        break;
    case 0x2:
        sign = 1;
        index = (a & INDEX_MASK) >> INDEX_SHIFT;
        remdr = a & REMDR_MASK;
        break;
    case 0x3:
        sign = 1;
        index = ((ONE_HALF - a) & INDEX_MASK) >> INDEX_SHIFT;
        remdr = (ONE_HALF - a) & REMDR_MASK;
        break;
    default:
        //error
        MLE_ASSERT(highTwoBits < 4);
        sign = 0;
        index = 0;
        remdr = 0;
        break;
    }
    return;
}

static void
cosineTableIndex(MlScalar x,
                 unsigned long &index,
                 unsigned long &remdr,
                 unsigned long &sign )
{
    unsigned long a = mlScalarGetValue( x );
    unsigned long highTwoBits = (a & HIGH_TWOBIT_MASK) >> (ML_FIXED_RADIX - 2);

    switch (highTwoBits) {
    case 0x0:
        sign = 0;
        index = ((ONE_FOURTH - a) & INDEX_MASK) >> INDEX_SHIFT;
        remdr = (ONE_FOURTH - a) & REMDR_MASK;
        break;
    case 0x1:
        sign = 1;
        index = (a & (INDEX_MASK>>1)) >> INDEX_SHIFT;
        remdr = a & REMDR_MASK;
        break;
    case 0x2:
        sign = 1;
        index = ((THREE_FOURTHS - a) & INDEX_MASK) >> INDEX_SHIFT;
        remdr = (THREE_FOURTHS - a) & REMDR_MASK;
        break;
    case 0x3:
        sign = 0;
        index = (a & (INDEX_MASK>>1)) >> INDEX_SHIFT;
        remdr = a & REMDR_MASK;
        break;
    default:
        //error
        MLE_ASSERT(highTwoBits < 4);
        sign = 0;
        index = 0;
        remdr = 0;
        break;
    }
    return;
}

// z = sin(x);
MlScalar
FixedSin( const MlScalar x ) 
{ 
    MlScalar tmp;
    unsigned long index, remdr, sign;
    
    sineTableIndex( x, index, remdr, sign );
    tmp = mlScalarSetValue(FixedTableInterp(sineLUT, index, remdr, sign, REMDR_SHIFT) );
    return tmp;    
} 

// z = cos(x);
MlScalar
FixedCos( const MlScalar x ) { 
    MlScalar tmp;
    unsigned long index, remdr, sign;
    
    cosineTableIndex( x, index, remdr, sign );
    tmp = mlScalarSetValue(FixedTableInterp(sineLUT, index, remdr, sign, REMDR_SHIFT) );
    return tmp;    
} 

// s = sin(x); c = cos(x);
void
FixedSinCos( const MlScalar x, MlScalar &s, MlScalar &c ) 
{ 
    unsigned long index, remdr, sign;
    
    sineTableIndex( x, index, remdr, sign );
    s = mlScalarSetValue(FixedTableInterp(sineLUT, index, remdr, sign, REMDR_SHIFT) );
    cosineTableIndex( x, index, remdr, sign );
    c = mlScalarSetValue(FixedTableInterp(sineLUT, index, remdr, sign, REMDR_SHIFT) );

    return;
} 
#endif

//////////////////////////////////////////////////////////////////////////
//  Write out the lookup table for use in fixed point sine computations.
//////////////////////////////////////////////////////////////////////////

#ifdef WRITE_LUT

#include <stdio.h>

// Make sure we do it with the fixed point flag on so that 
// mlScalarGetValue() returns a long.

#undef ML_FIXED_POINT
#define ML_FIXED_POINT 1

#include <math.h>

void writeLUT( int length, int shift )
{
    long *lut = new long[length + 1];
    int i;
    float x;
    MlScalar scalar;
    
    for (i=0; i<=length; i++) {
        x = sinf(0.5f * M_PI * ((float)i / (float) length));
        scalar = mlFloatToScalar(x);
        lut[i] = mlScalarGetValue(scalar);
//      fprintf(stderr, "err=%f, sin=%f, tabsin=%f\n", x - mlScalarToFloat(scalar), x, mlScalarToFloat(scalar));
    }

    printf( "static long sineLUT[] = { \n\t" );
    for (i=0; i<length; i++) {
        printf("0x%lx, ", lut[i] >> shift);
        if (7 == (i % 8)) {
            printf("\n\t");
        }
    }
    printf("0x%lx", lut[length] >> shift);
    printf( "\n};\n" );

    return;
}

int main ()
{
    printf("#if ML_FIXED_RADIX == %d\n", 16);
    writeLUT( 1024, 0 );
    printf("#else\n#if ML_FIXED_RADIX == %d\n", 12);
    writeLUT( 1024, 4 );
    printf("#endif\n#endif\n");    

    return 0;
}

#endif

//////////////////////////////////////////////////////////////////////////
//  Test the sine table itself
//////////////////////////////////////////////////////////////////////////

#ifdef TEST_SINE_TABLE

#include <stdio.h>
#include <math.h>

int main ()
{
    int i, N;
    float x, sx;
    float e;
    float err;
    float xerr;

    MlScalar mltab;
    float tabx;

    N = 100;
    printf("Testing Sine Table\n", N);
//    printf("radians   angle     sin(x)    LUT[x]  err\n");
    N = sizeof(sineLUT)/sizeof(long) - 1;
    err = 0.0f;
    for (i=0; i<=N; i++) {
        x = i * 0.5f * M_PI / (float)N;
        sx = sin(x);
        mltab = mlScalarSetValue(sineLUT[i]);
        tabx = mlScalarToFloat(mltab);
        e = fabsf(sx-tabx);
//        printf("%10.8f %10.8f %10.8f %10.8f %10.8f\n", 
//               x, (float)(i/(float)N), sx, tabx, e);
        if (e > err) {
            err = e;
            xerr = x;
        }
    }

    if (err != 0.0f) {
        printf("Max sine([0..2PI]) error of %f at %f.\n", err, xerr);
    }
    else {
        printf("Max sine([0..2PI]) error == 0.0f\n");
    }
    return 0;
}

#endif

//////////////////////////////////////////////////////////////////////////
//  Test the sine and cosine functions
//////////////////////////////////////////////////////////////////////////

#ifdef TEST_SINE_COSINE

#include <stdio.h>
#include <math.h>

int main ()
{
    int i, N;
    float x, sx, cx, mlsx, mlcx;
    MlScalar mlx, fx, tmp;
    float ec, es;
    float errs, errc;
    float xerrs, xerrc;

    N = 100;
    errs = 0.0f;
    errc = 0.0f;
    printf("Testing %d numbers\n", N);
//    printf("radians   i/N rad   scal(i/N)  angle     sin(x)    mlSin(x)  cos(x)    mlCos(x)  errSin  errCos\n");
    for (i=0; i<=N; i++) {
        x = i * 2.0f * M_PI / (float)N;
        sx = sin(x);
        cx = cos(x);
        fx = mlFloatToScalar(x);
        mlx = mlRadiansToAngle(fx);
        tmp = mlSin(mlx);
        mlsx = mlScalarToFloat(tmp);
        tmp = mlCos(mlx);
        mlcx = mlScalarToFloat(tmp);
        es = fabsf(sx-mlsx);
        ec = fabsf(cx-mlcx);
//        printf("%10.8f %10.8f %10.8f %10.8f %10.8f %10.8f %10.8f %10.8f %10.8f %10.8f\n", 
//               x, (float)(i/(float)N), 
//               mlScalarToFloat(fx), mlScalarToFloat(mlx), 
//               sx, mlsx, cx, mlcx, es, ec);
        if (es > errs) {
            errs = es;
            xerrs = x;
        }
        if (ec > errc) {
            errc = ec;
            xerrc = x;
        }
    }

    if (errs != 0.0f || errc != 0.0f) {
        printf("Max sin([0..2PI]) error of %f at %f.\n", errs, xerrs);
        printf("Max cos([0..2PI]) error of %f at %f.\n", errc, xerrc);
    }
    else {
        printf("Max sine([0..2PI]) error == 0.0f\n");
    }


    return 0;
}

#endif

