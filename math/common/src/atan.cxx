
// COPYRIGHT_BEGIN
//
// The MIT License (MIT)
//
// Copyright (c) 2015 Wizzer Works
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//  For information concerning this source file, contact Mark S. Millard,
//  of Wizzer Works at msm@wizzerworks.com.
//
//  More information concerning Wizzer Works may be found at
//
//      http://www.wizzerworks.com
//
// COPYRIGHT_END

// include Magic Lantern math header files
#include "math/scalar.h"
#include "math/angle.h"
#include "math/atan.h"

// include Magic Lantern kernel header files
#include "mle/mlAssert.h"


#if ML_FIXED_POINT

#ifdef WRITE_LUT
static short arctan2LUT[] = { 1,2,3,4 };

#else  /* WRITE_LUT */

// Insert mlto-generated LUT here...

#if ML_FIXED_RADIX == 16
static short arctan2LUT[] = { 
    0x0, 0xa, 0x14, 0x1e, 0x28, 0x32, 0x3c, 0x47, 
    0x51, 0x5b, 0x65, 0x6f, 0x7a, 0x84, 0x8e, 0x98, 
    0xa2, 0xad, 0xb7, 0xc1, 0xcb, 0xd5, 0xdf, 0xea, 
    0xf4, 0xfe, 0x108, 0x112, 0x11d, 0x127, 0x131, 0x13b, 
    0x145, 0x14f, 0x15a, 0x164, 0x16e, 0x178, 0x182, 0x18c, 
    0x197, 0x1a1, 0x1ab, 0x1b5, 0x1bf, 0x1ca, 0x1d4, 0x1de, 
    0x1e8, 0x1f2, 0x1fc, 0x207, 0x211, 0x21b, 0x225, 0x22f, 
    0x239, 0x243, 0x24e, 0x258, 0x262, 0x26c, 0x276, 0x280, 
    0x28a, 0x295, 0x29f, 0x2a9, 0x2b3, 0x2bd, 0x2c7, 0x2d1, 
    0x2dc, 0x2e6, 0x2f0, 0x2fa, 0x304, 0x30e, 0x318, 0x323, 
    0x32d, 0x337, 0x341, 0x34b, 0x355, 0x35f, 0x369, 0x373, 
    0x37e, 0x388, 0x392, 0x39c, 0x3a6, 0x3b0, 0x3ba, 0x3c4, 
    0x3ce, 0x3d9, 0x3e3, 0x3ed, 0x3f7, 0x401, 0x40b, 0x415, 
    0x41f, 0x429, 0x433, 0x43d, 0x447, 0x451, 0x45c, 0x466, 
    0x470, 0x47a, 0x484, 0x48e, 0x498, 0x4a2, 0x4ac, 0x4b6, 
    0x4c0, 0x4ca, 0x4d4, 0x4de, 0x4e8, 0x4f2, 0x4fc, 0x506, 
    0x510, 0x51a, 0x525, 0x52f, 0x539, 0x543, 0x54d, 0x557, 
    0x561, 0x56b, 0x575, 0x57f, 0x589, 0x593, 0x59d, 0x5a7, 
    0x5b1, 0x5bb, 0x5c5, 0x5cf, 0x5d9, 0x5e3, 0x5ed, 0x5f6, 
    0x600, 0x60a, 0x614, 0x61e, 0x628, 0x632, 0x63c, 0x646, 
    0x650, 0x65a, 0x664, 0x66e, 0x678, 0x682, 0x68c, 0x696, 
    0x6a0, 0x6a9, 0x6b3, 0x6bd, 0x6c7, 0x6d1, 0x6db, 0x6e5, 
    0x6ef, 0x6f9, 0x703, 0x70c, 0x716, 0x720, 0x72a, 0x734, 
    0x73e, 0x748, 0x752, 0x75b, 0x765, 0x76f, 0x779, 0x783, 
    0x78d, 0x796, 0x7a0, 0x7aa, 0x7b4, 0x7be, 0x7c8, 0x7d2, 
    0x7db, 0x7e5, 0x7ef, 0x7f9, 0x803, 0x80c, 0x816, 0x820, 
    0x82a, 0x833, 0x83d, 0x847, 0x851, 0x85b, 0x864, 0x86e, 
    0x878, 0x882, 0x88b, 0x895, 0x89f, 0x8a9, 0x8b2, 0x8bc, 
    0x8c6, 0x8cf, 0x8d9, 0x8e3, 0x8ec, 0x8f6, 0x900, 0x90a, 
    0x913, 0x91d, 0x927, 0x930, 0x93a, 0x944, 0x94d, 0x957, 
    0x961, 0x96a, 0x974, 0x97e, 0x987, 0x991, 0x99b, 0x9a4, 
    0x9ae, 0x9b7, 0x9c1, 0x9cb, 0x9d4, 0x9de, 0x9e7, 0x9f1, 
    0x9fb, 0xa04, 0xa0e, 0xa17, 0xa21, 0xa2a, 0xa34, 0xa3e, 
    0xa47, 0xa51, 0xa5a, 0xa64, 0xa6d, 0xa77, 0xa80, 0xa8a, 
    0xa94, 0xa9d, 0xaa6, 0xab0, 0xab9, 0xac3, 0xacc, 0xad6, 
    0xadf, 0xae9, 0xaf2, 0xafc, 0xb05, 0xb0f, 0xb18, 0xb22, 
    0xb2b, 0xb35, 0xb3e, 0xb47, 0xb51, 0xb5a, 0xb64, 0xb6d, 
    0xb76, 0xb80, 0xb89, 0xb93, 0xb9c, 0xba5, 0xbaf, 0xbb8, 
    0xbc1, 0xbcb, 0xbd4, 0xbde, 0xbe7, 0xbf0, 0xbfa, 0xc03, 
    0xc0c, 0xc15, 0xc1f, 0xc28, 0xc31, 0xc3b, 0xc44, 0xc4d, 
    0xc57, 0xc60, 0xc69, 0xc72, 0xc7c, 0xc85, 0xc8e, 0xc98, 
    0xca1, 0xcaa, 0xcb3, 0xcbc, 0xcc6, 0xccf, 0xcd8, 0xce1, 
    0xcea, 0xcf4, 0xcfd, 0xd06, 0xd0f, 0xd18, 0xd21, 0xd2b, 
    0xd34, 0xd3d, 0xd46, 0xd4f, 0xd58, 0xd61, 0xd6b, 0xd74, 
    0xd7d, 0xd86, 0xd8f, 0xd98, 0xda1, 0xdaa, 0xdb3, 0xdbd, 
    0xdc6, 0xdcf, 0xdd8, 0xde1, 0xdea, 0xdf3, 0xdfc, 0xe05, 
    0xe0e, 0xe17, 0xe20, 0xe29, 0xe32, 0xe3b, 0xe44, 0xe4d, 
    0xe56, 0xe5f, 0xe68, 0xe71, 0xe7a, 0xe83, 0xe8c, 0xe95, 
    0xe9e, 0xea6, 0xeaf, 0xeb8, 0xec1, 0xeca, 0xed3, 0xedc, 
    0xee5, 0xeee, 0xef7, 0xeff, 0xf08, 0xf11, 0xf1a, 0xf23, 
    0xf2c, 0xf35, 0xf3d, 0xf46, 0xf4f, 0xf58, 0xf61, 0xf69, 
    0xf72, 0xf7b, 0xf84, 0xf8d, 0xf95, 0xf9e, 0xfa7, 0xfb0, 
    0xfb8, 0xfc1, 0xfca, 0xfd2, 0xfdb, 0xfe4, 0xfed, 0xff5, 
    0xffe, 0x1007, 0x100f, 0x1018, 0x1021, 0x102a, 0x1032, 0x103b, 
    0x1043, 0x104c, 0x1055, 0x105d, 0x1066, 0x106f, 0x1077, 0x1080, 
    0x1088, 0x1091, 0x109a, 0x10a2, 0x10ab, 0x10b3, 0x10bc, 0x10c4, 
    0x10cd, 0x10d6, 0x10de, 0x10e7, 0x10ef, 0x10f8, 0x1100, 0x1109, 
    0x1111, 0x111a, 0x1122, 0x112b, 0x1133, 0x113c, 0x1144, 0x114d, 
    0x1155, 0x115d, 0x1166, 0x116e, 0x1177, 0x117f, 0x1188, 0x1190, 
    0x1198, 0x11a1, 0x11a9, 0x11b2, 0x11ba, 0x11c2, 0x11cb, 0x11d3, 
    0x11db, 0x11e4, 0x11ec, 0x11f5, 0x11fd, 0x1205, 0x120d, 0x1216, 
    0x121e, 0x1226, 0x122f, 0x1237, 0x123f, 0x1247, 0x1250, 0x1258, 
    0x1260, 0x1269, 0x1271, 0x1279, 0x1281, 0x1289, 0x1292, 0x129a, 
    0x12a2, 0x12aa, 0x12b2, 0x12bb, 0x12c3, 0x12cb, 0x12d3, 0x12db, 
    0x12e3, 0x12ec, 0x12f4, 0x12fc, 0x1304, 0x130c, 0x1314, 0x131c, 
    0x1324, 0x132c, 0x1335, 0x133d, 0x1345, 0x134d, 0x1355, 0x135d, 
    0x1365, 0x136d, 0x1375, 0x137d, 0x1385, 0x138d, 0x1395, 0x139d, 
    0x13a5, 0x13ad, 0x13b5, 0x13bd, 0x13c5, 0x13cd, 0x13d5, 0x13dd, 
    0x13e5, 0x13ed, 0x13f5, 0x13fd, 0x1405, 0x140d, 0x1415, 0x141c, 
    0x1424, 0x142c, 0x1434, 0x143c, 0x1444, 0x144c, 0x1454, 0x145b, 
    0x1463, 0x146b, 0x1473, 0x147b, 0x1482, 0x148a, 0x1492, 0x149a, 
    0x14a2, 0x14a9, 0x14b1, 0x14b9, 0x14c1, 0x14c9, 0x14d0, 0x14d8, 
    0x14e0, 0x14e8, 0x14ef, 0x14f7, 0x14ff, 0x1506, 0x150e, 0x1516, 
    0x151e, 0x1525, 0x152d, 0x1535, 0x153c, 0x1544, 0x154c, 0x1553, 
    0x155b, 0x1562, 0x156a, 0x1572, 0x1579, 0x1581, 0x1588, 0x1590, 
    0x1598, 0x159f, 0x15a7, 0x15ae, 0x15b6, 0x15bd, 0x15c5, 0x15cd, 
    0x15d4, 0x15dc, 0x15e3, 0x15eb, 0x15f2, 0x15fa, 0x1601, 0x1609, 
    0x1610, 0x1618, 0x161f, 0x1627, 0x162e, 0x1635, 0x163d, 0x1644, 
    0x164c, 0x1653, 0x165b, 0x1662, 0x166a, 0x1671, 0x1678, 0x1680, 
    0x1687, 0x168e, 0x1696, 0x169d, 0x16a4, 0x16ac, 0x16b3, 0x16bb, 
    0x16c2, 0x16c9, 0x16d0, 0x16d8, 0x16df, 0x16e6, 0x16ee, 0x16f5, 
    0x16fc, 0x1703, 0x170b, 0x1712, 0x1719, 0x1721, 0x1728, 0x172f, 
    0x1736, 0x173d, 0x1745, 0x174c, 0x1753, 0x175a, 0x1761, 0x1769, 
    0x1770, 0x1777, 0x177e, 0x1785, 0x178c, 0x1794, 0x179b, 0x17a2, 
    0x17a9, 0x17b0, 0x17b7, 0x17be, 0x17c5, 0x17cc, 0x17d4, 0x17db, 
    0x17e2, 0x17e9, 0x17f0, 0x17f7, 0x17fe, 0x1805, 0x180c, 0x1813, 
    0x181a, 0x1821, 0x1828, 0x182f, 0x1836, 0x183d, 0x1844, 0x184b, 
    0x1852, 0x1859, 0x1860, 0x1867, 0x186e, 0x1875, 0x187c, 0x1883, 
    0x188a, 0x1890, 0x1897, 0x189e, 0x18a5, 0x18ac, 0x18b3, 0x18ba, 
    0x18c1, 0x18c8, 0x18ce, 0x18d5, 0x18dc, 0x18e3, 0x18ea, 0x18f0, 
    0x18f7, 0x18fe, 0x1905, 0x190c, 0x1913, 0x1919, 0x1920, 0x1927, 
    0x192e, 0x1934, 0x193b, 0x1942, 0x1949, 0x194f, 0x1956, 0x195d, 
    0x1964, 0x196a, 0x1971, 0x1978, 0x197e, 0x1985, 0x198c, 0x1992, 
    0x1999, 0x19a0, 0x19a7, 0x19ad, 0x19b4, 0x19ba, 0x19c1, 0x19c8, 
    0x19ce, 0x19d5, 0x19dc, 0x19e2, 0x19e9, 0x19ef, 0x19f6, 0x19fc, 
    0x1a03, 0x1a0a, 0x1a10, 0x1a17, 0x1a1d, 0x1a24, 0x1a2a, 0x1a31, 
    0x1a37, 0x1a3e, 0x1a44, 0x1a4b, 0x1a51, 0x1a58, 0x1a5e, 0x1a65, 
    0x1a6b, 0x1a72, 0x1a78, 0x1a7f, 0x1a85, 0x1a8c, 0x1a92, 0x1a98, 
    0x1a9f, 0x1aa5, 0x1aac, 0x1ab2, 0x1ab9, 0x1abf, 0x1ac5, 0x1acc, 
    0x1ad2, 0x1ad8, 0x1adf, 0x1ae5, 0x1aec, 0x1af2, 0x1af8, 0x1afe, 
    0x1b05, 0x1b0b, 0x1b12, 0x1b18, 0x1b1e, 0x1b24, 0x1b2b, 0x1b31, 
    0x1b37, 0x1b3e, 0x1b44, 0x1b4a, 0x1b50, 0x1b57, 0x1b5d, 0x1b63, 
    0x1b69, 0x1b6f, 0x1b76, 0x1b7c, 0x1b82, 0x1b88, 0x1b8f, 0x1b95, 
    0x1b9b, 0x1ba1, 0x1ba7, 0x1bae, 0x1bb4, 0x1bba, 0x1bc0, 0x1bc6, 
    0x1bcc, 0x1bd2, 0x1bd9, 0x1bdf, 0x1be5, 0x1beb, 0x1bf1, 0x1bf7, 
    0x1bfd, 0x1c03, 0x1c09, 0x1c0f, 0x1c15, 0x1c1c, 0x1c22, 0x1c28, 
    0x1c2e, 0x1c34, 0x1c3a, 0x1c40, 0x1c46, 0x1c4c, 0x1c52, 0x1c58, 
    0x1c5e, 0x1c64, 0x1c6a, 0x1c70, 0x1c76, 0x1c7c, 0x1c82, 0x1c88, 
    0x1c8e, 0x1c94, 0x1c99, 0x1c9f, 0x1ca5, 0x1cab, 0x1cb1, 0x1cb7, 
    0x1cbd, 0x1cc3, 0x1cc9, 0x1ccf, 0x1cd5, 0x1cdb, 0x1ce0, 0x1ce6, 
    0x1cec, 0x1cf2, 0x1cf8, 0x1cfe, 0x1d03, 0x1d09, 0x1d0f, 0x1d15, 
    0x1d1b, 0x1d21, 0x1d26, 0x1d2c, 0x1d32, 0x1d38, 0x1d3e, 0x1d43, 
    0x1d49, 0x1d4f, 0x1d55, 0x1d5a, 0x1d60, 0x1d66, 0x1d6c, 0x1d71, 
    0x1d77, 0x1d7d, 0x1d82, 0x1d88, 0x1d8e, 0x1d94, 0x1d99, 0x1d9f, 
    0x1da5, 0x1daa, 0x1db0, 0x1db6, 0x1dbb, 0x1dc1, 0x1dc7, 0x1dcc, 
    0x1dd2, 0x1dd8, 0x1ddd, 0x1de3, 0x1de8, 0x1dee, 0x1df4, 0x1df9, 
    0x1dff, 0x1e04, 0x1e0a, 0x1e10, 0x1e15, 0x1e1b, 0x1e20, 0x1e26, 
    0x1e2b, 0x1e31, 0x1e37, 0x1e3c, 0x1e42, 0x1e47, 0x1e4d, 0x1e52, 
    0x1e58, 0x1e5d, 0x1e63, 0x1e68, 0x1e6e, 0x1e73, 0x1e79, 0x1e7e, 
    0x1e83, 0x1e89, 0x1e8e, 0x1e94, 0x1e99, 0x1e9f, 0x1ea4, 0x1eaa, 
    0x1eaf, 0x1eb4, 0x1eba, 0x1ebf, 0x1ec5, 0x1eca, 0x1ed0, 0x1ed5, 
    0x1eda, 0x1ee0, 0x1ee5, 0x1eea, 0x1ef0, 0x1ef5, 0x1efb, 0x1f00, 
    0x1f05, 0x1f0a, 0x1f10, 0x1f15, 0x1f1a, 0x1f20, 0x1f25, 0x1f2a, 
    0x1f30, 0x1f35, 0x1f3a, 0x1f40, 0x1f45, 0x1f4a, 0x1f4f, 0x1f55, 
    0x1f5a, 0x1f5f, 0x1f64, 0x1f6a, 0x1f6f, 0x1f74, 0x1f79, 0x1f7f, 
    0x1f84, 0x1f89, 0x1f8e, 0x1f93, 0x1f99, 0x1f9e, 0x1fa3, 0x1fa8, 
    0x1fad, 0x1fb2, 0x1fb8, 0x1fbd, 0x1fc2, 0x1fc7, 0x1fcc, 0x1fd1, 
    0x1fd6, 0x1fdc, 0x1fe1, 0x1fe6, 0x1feb, 0x1ff0, 0x1ff5, 0x1ffa, 
    0x2000
};
#else
#if ML_FIXED_RADIX == 12
static short arctan2LUT[] = { 
    0x0, 0x0, 0x1, 0x1, 0x2, 0x3, 0x3, 0x4, 
    0x5, 0x5, 0x6, 0x6, 0x7, 0x8, 0x8, 0x9, 
    0xa, 0xa, 0xb, 0xc, 0xc, 0xd, 0xd, 0xe, 
    0xf, 0xf, 0x10, 0x11, 0x11, 0x12, 0x13, 0x13, 
    0x14, 0x14, 0x15, 0x16, 0x16, 0x17, 0x18, 0x18, 
    0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1c, 0x1d, 0x1d, 
    0x1e, 0x1f, 0x1f, 0x20, 0x21, 0x21, 0x22, 0x22, 
    0x23, 0x24, 0x24, 0x25, 0x26, 0x26, 0x27, 0x28, 
    0x28, 0x29, 0x29, 0x2a, 0x2b, 0x2b, 0x2c, 0x2d, 
    0x2d, 0x2e, 0x2f, 0x2f, 0x30, 0x30, 0x31, 0x32, 
    0x32, 0x33, 0x34, 0x34, 0x35, 0x35, 0x36, 0x37, 
    0x37, 0x38, 0x39, 0x39, 0x3a, 0x3b, 0x3b, 0x3c, 
    0x3c, 0x3d, 0x3e, 0x3e, 0x3f, 0x40, 0x40, 0x41, 
    0x41, 0x42, 0x43, 0x43, 0x44, 0x45, 0x45, 0x46, 
    0x47, 0x47, 0x48, 0x48, 0x49, 0x4a, 0x4a, 0x4b, 
    0x4c, 0x4c, 0x4d, 0x4d, 0x4e, 0x4f, 0x4f, 0x50, 
    0x51, 0x51, 0x52, 0x52, 0x53, 0x54, 0x54, 0x55, 
    0x56, 0x56, 0x57, 0x57, 0x58, 0x59, 0x59, 0x5a, 
    0x5b, 0x5b, 0x5c, 0x5c, 0x5d, 0x5e, 0x5e, 0x5f, 
    0x60, 0x60, 0x61, 0x61, 0x62, 0x63, 0x63, 0x64, 
    0x65, 0x65, 0x66, 0x66, 0x67, 0x68, 0x68, 0x69, 
    0x6a, 0x6a, 0x6b, 0x6b, 0x6c, 0x6d, 0x6d, 0x6e, 
    0x6e, 0x6f, 0x70, 0x70, 0x71, 0x72, 0x72, 0x73, 
    0x73, 0x74, 0x75, 0x75, 0x76, 0x76, 0x77, 0x78, 
    0x78, 0x79, 0x7a, 0x7a, 0x7b, 0x7b, 0x7c, 0x7d, 
    0x7d, 0x7e, 0x7e, 0x7f, 0x80, 0x80, 0x81, 0x82, 
    0x82, 0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x86, 
    0x87, 0x88, 0x88, 0x89, 0x89, 0x8a, 0x8b, 0x8b, 
    0x8c, 0x8c, 0x8d, 0x8e, 0x8e, 0x8f, 0x90, 0x90, 
    0x91, 0x91, 0x92, 0x93, 0x93, 0x94, 0x94, 0x95, 
    0x96, 0x96, 0x97, 0x97, 0x98, 0x99, 0x99, 0x9a, 
    0x9a, 0x9b, 0x9c, 0x9c, 0x9d, 0x9d, 0x9e, 0x9f, 
    0x9f, 0xa0, 0xa0, 0xa1, 0xa2, 0xa2, 0xa3, 0xa3, 
    0xa4, 0xa5, 0xa5, 0xa6, 0xa6, 0xa7, 0xa8, 0xa8, 
    0xa9, 0xa9, 0xaa, 0xab, 0xab, 0xac, 0xac, 0xad, 
    0xad, 0xae, 0xaf, 0xaf, 0xb0, 0xb0, 0xb1, 0xb2, 
    0xb2, 0xb3, 0xb3, 0xb4, 0xb5, 0xb5, 0xb6, 0xb6, 
    0xb7, 0xb8, 0xb8, 0xb9, 0xb9, 0xba, 0xba, 0xbb, 
    0xbc, 0xbc, 0xbd, 0xbd, 0xbe, 0xbf, 0xbf, 0xc0, 
    0xc0, 0xc1, 0xc1, 0xc2, 0xc3, 0xc3, 0xc4, 0xc4, 
    0xc5, 0xc6, 0xc6, 0xc7, 0xc7, 0xc8, 0xc8, 0xc9, 
    0xca, 0xca, 0xcb, 0xcb, 0xcc, 0xcc, 0xcd, 0xce, 
    0xce, 0xcf, 0xcf, 0xd0, 0xd0, 0xd1, 0xd2, 0xd2, 
    0xd3, 0xd3, 0xd4, 0xd4, 0xd5, 0xd6, 0xd6, 0xd7, 
    0xd7, 0xd8, 0xd8, 0xd9, 0xda, 0xda, 0xdb, 0xdb, 
    0xdc, 0xdc, 0xdd, 0xde, 0xde, 0xdf, 0xdf, 0xe0, 
    0xe0, 0xe1, 0xe2, 0xe2, 0xe3, 0xe3, 0xe4, 0xe4, 
    0xe5, 0xe5, 0xe6, 0xe7, 0xe7, 0xe8, 0xe8, 0xe9, 
    0xe9, 0xea, 0xea, 0xeb, 0xec, 0xec, 0xed, 0xed, 
    0xee, 0xee, 0xef, 0xef, 0xf0, 0xf1, 0xf1, 0xf2, 
    0xf2, 0xf3, 0xf3, 0xf4, 0xf4, 0xf5, 0xf6, 0xf6, 
    0xf7, 0xf7, 0xf8, 0xf8, 0xf9, 0xf9, 0xfa, 0xfb, 
    0xfb, 0xfc, 0xfc, 0xfd, 0xfd, 0xfe, 0xfe, 0xff, 
    0xff, 0x100, 0x100, 0x101, 0x102, 0x102, 0x103, 0x103, 
    0x104, 0x104, 0x105, 0x105, 0x106, 0x106, 0x107, 0x108, 
    0x108, 0x109, 0x109, 0x10a, 0x10a, 0x10b, 0x10b, 0x10c, 
    0x10c, 0x10d, 0x10d, 0x10e, 0x10e, 0x10f, 0x110, 0x110, 
    0x111, 0x111, 0x112, 0x112, 0x113, 0x113, 0x114, 0x114, 
    0x115, 0x115, 0x116, 0x116, 0x117, 0x117, 0x118, 0x119, 
    0x119, 0x11a, 0x11a, 0x11b, 0x11b, 0x11c, 0x11c, 0x11d, 
    0x11d, 0x11e, 0x11e, 0x11f, 0x11f, 0x120, 0x120, 0x121, 
    0x121, 0x122, 0x122, 0x123, 0x123, 0x124, 0x125, 0x125, 
    0x126, 0x126, 0x127, 0x127, 0x128, 0x128, 0x129, 0x129, 
    0x12a, 0x12a, 0x12b, 0x12b, 0x12c, 0x12c, 0x12d, 0x12d, 
    0x12e, 0x12e, 0x12f, 0x12f, 0x130, 0x130, 0x131, 0x131, 
    0x132, 0x132, 0x133, 0x133, 0x134, 0x134, 0x135, 0x135, 
    0x136, 0x136, 0x137, 0x137, 0x138, 0x138, 0x139, 0x139, 
    0x13a, 0x13a, 0x13b, 0x13b, 0x13c, 0x13c, 0x13d, 0x13d, 
    0x13e, 0x13e, 0x13f, 0x13f, 0x140, 0x140, 0x141, 0x141, 
    0x142, 0x142, 0x143, 0x143, 0x144, 0x144, 0x145, 0x145, 
    0x146, 0x146, 0x147, 0x147, 0x148, 0x148, 0x149, 0x149, 
    0x14a, 0x14a, 0x14b, 0x14b, 0x14c, 0x14c, 0x14d, 0x14d, 
    0x14e, 0x14e, 0x14e, 0x14f, 0x14f, 0x150, 0x150, 0x151, 
    0x151, 0x152, 0x152, 0x153, 0x153, 0x154, 0x154, 0x155, 
    0x155, 0x156, 0x156, 0x157, 0x157, 0x158, 0x158, 0x159, 
    0x159, 0x159, 0x15a, 0x15a, 0x15b, 0x15b, 0x15c, 0x15c, 
    0x15d, 0x15d, 0x15e, 0x15e, 0x15f, 0x15f, 0x160, 0x160, 
    0x161, 0x161, 0x161, 0x162, 0x162, 0x163, 0x163, 0x164, 
    0x164, 0x165, 0x165, 0x166, 0x166, 0x167, 0x167, 0x168, 
    0x168, 0x168, 0x169, 0x169, 0x16a, 0x16a, 0x16b, 0x16b, 
    0x16c, 0x16c, 0x16d, 0x16d, 0x16d, 0x16e, 0x16e, 0x16f, 
    0x16f, 0x170, 0x170, 0x171, 0x171, 0x172, 0x172, 0x172, 
    0x173, 0x173, 0x174, 0x174, 0x175, 0x175, 0x176, 0x176, 
    0x177, 0x177, 0x177, 0x178, 0x178, 0x179, 0x179, 0x17a, 
    0x17a, 0x17b, 0x17b, 0x17b, 0x17c, 0x17c, 0x17d, 0x17d, 
    0x17e, 0x17e, 0x17f, 0x17f, 0x17f, 0x180, 0x180, 0x181, 
    0x181, 0x182, 0x182, 0x182, 0x183, 0x183, 0x184, 0x184, 
    0x185, 0x185, 0x186, 0x186, 0x186, 0x187, 0x187, 0x188, 
    0x188, 0x189, 0x189, 0x189, 0x18a, 0x18a, 0x18b, 0x18b, 
    0x18c, 0x18c, 0x18c, 0x18d, 0x18d, 0x18e, 0x18e, 0x18f, 
    0x18f, 0x18f, 0x190, 0x190, 0x191, 0x191, 0x192, 0x192, 
    0x192, 0x193, 0x193, 0x194, 0x194, 0x194, 0x195, 0x195, 
    0x196, 0x196, 0x197, 0x197, 0x197, 0x198, 0x198, 0x199, 
    0x199, 0x19a, 0x19a, 0x19a, 0x19b, 0x19b, 0x19c, 0x19c, 
    0x19c, 0x19d, 0x19d, 0x19e, 0x19e, 0x19e, 0x19f, 0x19f, 
    0x1a0, 0x1a0, 0x1a1, 0x1a1, 0x1a1, 0x1a2, 0x1a2, 0x1a3, 
    0x1a3, 0x1a3, 0x1a4, 0x1a4, 0x1a5, 0x1a5, 0x1a5, 0x1a6, 
    0x1a6, 0x1a7, 0x1a7, 0x1a7, 0x1a8, 0x1a8, 0x1a9, 0x1a9, 
    0x1a9, 0x1aa, 0x1aa, 0x1ab, 0x1ab, 0x1ab, 0x1ac, 0x1ac, 
    0x1ad, 0x1ad, 0x1ad, 0x1ae, 0x1ae, 0x1af, 0x1af, 0x1af, 
    0x1b0, 0x1b0, 0x1b1, 0x1b1, 0x1b1, 0x1b2, 0x1b2, 0x1b3, 
    0x1b3, 0x1b3, 0x1b4, 0x1b4, 0x1b5, 0x1b5, 0x1b5, 0x1b6, 
    0x1b6, 0x1b6, 0x1b7, 0x1b7, 0x1b8, 0x1b8, 0x1b8, 0x1b9, 
    0x1b9, 0x1ba, 0x1ba, 0x1ba, 0x1bb, 0x1bb, 0x1bc, 0x1bc, 
    0x1bc, 0x1bd, 0x1bd, 0x1bd, 0x1be, 0x1be, 0x1bf, 0x1bf, 
    0x1bf, 0x1c0, 0x1c0, 0x1c0, 0x1c1, 0x1c1, 0x1c2, 0x1c2, 
    0x1c2, 0x1c3, 0x1c3, 0x1c4, 0x1c4, 0x1c4, 0x1c5, 0x1c5, 
    0x1c5, 0x1c6, 0x1c6, 0x1c7, 0x1c7, 0x1c7, 0x1c8, 0x1c8, 
    0x1c8, 0x1c9, 0x1c9, 0x1c9, 0x1ca, 0x1ca, 0x1cb, 0x1cb, 
    0x1cb, 0x1cc, 0x1cc, 0x1cc, 0x1cd, 0x1cd, 0x1ce, 0x1ce, 
    0x1ce, 0x1cf, 0x1cf, 0x1cf, 0x1d0, 0x1d0, 0x1d0, 0x1d1, 
    0x1d1, 0x1d2, 0x1d2, 0x1d2, 0x1d3, 0x1d3, 0x1d3, 0x1d4, 
    0x1d4, 0x1d4, 0x1d5, 0x1d5, 0x1d6, 0x1d6, 0x1d6, 0x1d7, 
    0x1d7, 0x1d7, 0x1d8, 0x1d8, 0x1d8, 0x1d9, 0x1d9, 0x1d9, 
    0x1da, 0x1da, 0x1db, 0x1db, 0x1db, 0x1dc, 0x1dc, 0x1dc, 
    0x1dd, 0x1dd, 0x1dd, 0x1de, 0x1de, 0x1de, 0x1df, 0x1df, 
    0x1df, 0x1e0, 0x1e0, 0x1e1, 0x1e1, 0x1e1, 0x1e2, 0x1e2, 
    0x1e2, 0x1e3, 0x1e3, 0x1e3, 0x1e4, 0x1e4, 0x1e4, 0x1e5, 
    0x1e5, 0x1e5, 0x1e6, 0x1e6, 0x1e6, 0x1e7, 0x1e7, 0x1e7, 
    0x1e8, 0x1e8, 0x1e8, 0x1e9, 0x1e9, 0x1e9, 0x1ea, 0x1ea, 
    0x1ea, 0x1eb, 0x1eb, 0x1eb, 0x1ec, 0x1ec, 0x1ed, 0x1ed, 
    0x1ed, 0x1ee, 0x1ee, 0x1ee, 0x1ef, 0x1ef, 0x1ef, 0x1f0, 
    0x1f0, 0x1f0, 0x1f1, 0x1f1, 0x1f1, 0x1f2, 0x1f2, 0x1f2, 
    0x1f3, 0x1f3, 0x1f3, 0x1f4, 0x1f4, 0x1f4, 0x1f4, 0x1f5, 
    0x1f5, 0x1f5, 0x1f6, 0x1f6, 0x1f6, 0x1f7, 0x1f7, 0x1f7, 
    0x1f8, 0x1f8, 0x1f8, 0x1f9, 0x1f9, 0x1f9, 0x1fa, 0x1fa, 
    0x1fa, 0x1fb, 0x1fb, 0x1fb, 0x1fc, 0x1fc, 0x1fc, 0x1fd, 
    0x1fd, 0x1fd, 0x1fe, 0x1fe, 0x1fe, 0x1ff, 0x1ff, 0x1ff, 
    0x200
};
#endif
#endif

// ... to here.
#endif  /* WRITE_LUT */

#if (ML_FIXED_RADIX == 16)
// 10 bits as .1111111111000000
//  6 bits as .0000000000111111
#define INDEX_SHIFT 6
#define INDEX_MASK (0x0000003ff << INDEX_SHIFT)
#define REMDR_MASK (0x00000003f)
#define LUT_LENGTH 1024 /* 1 << 10 */

#else /* (ML_FIXED_RADIX == 16) */

#if (ML_FIXED_RADIX == 12)
// 10 bits as .111111111100
//  2 bits as .000000000011
#define INDEX_SHIFT 2
#define INDEX_MASK (0x000003ff << INDEX_SHIFT)
#define REMDR_MASK (0x00000003)
#define LUT_LENGTH 1024 /* 1 << 10 */
#endif /* (ML_FIXED_RADIX == 12) */

#endif /* (ML_FIXED_RADIX == 16) */

#define REMDR_SHIFT (ML_FIXED_RADIX - INDEX_SHIFT)


//
// The atan2 table goes from y/x = [0..1]. After that you must
// use x/y in [1..0] and set the invert bit.
//

static void
atan2TableIndex(MlScalar y, MlScalar x, 
                unsigned long &index, 
                unsigned long &remdr, 
                unsigned long &sign,
                unsigned long &invert )
{
    long opX = mlScalarGetValue( x );
    long opY = mlScalarGetValue( y );
#if ML_FIXED_CHECK_UNINITIALIZED
    MLE_ASSERT(opX != 0xdeadbeef);
    MLE_ASSERT(opY != 0xdeadbeef);
#endif
    // sign becomes signx.signy for x and y.
    sign = (opX < 0) | ((opY < 0) << 1);
    MlScalar opCos = (opX < 0) ? -x : x;
    MlScalar opSin = (opY < 0) ? -y : y;

    if (invert = (opSin > opCos)) {
        MlScalar tmp = opSin;
        opSin = opCos;
        opCos = tmp;
    }

    // Now have 0 <= opSin <= opCos <= 1.  Divide and lookup.

    if (opSin == ML_SCALAR_ZERO) {
        index = 0;
        remdr = 0;
        return;
    }
    else if (opSin == opCos) {
        index = LUT_LENGTH;
        remdr = 0;
        return;
    }

    MlScalar tangent = FixedDivide(opSin, opCos);
    unsigned long tan = mlScalarGetValue(tangent);

    index = (tan & INDEX_MASK) >> INDEX_SHIFT;
    remdr = (tan & REMDR_MASK);

    return;    
}


// z = atan2(y, x);
// 
// Returns z in [0..1] using the standard angular representation.
// 
MlScalar
FixedAtan2( const MlScalar y, const MlScalar x ) 
{ 
    // Note that atan2f() returns a NaN for out-of-range arguments,
    // so make a similar assertion.  If someone\'s tan2 computation 
    // is off by a little, they\'ll find out.  In optimized mode
    // they\'ll just get a reasonable value.

    if (x == ML_SCALAR_ZERO) {
        if (y > ML_SCALAR_ZERO) {
            return ML_ANGLE_PI_HALF;
        }
        else if (y < ML_SCALAR_ZERO) {
            return ML_ANGLE_PI_HALF + ML_ANGLE_PI;
        }
        else /* y == ML_SCALAR_ZERO */ {
            MLE_ASSERT(x != ML_SCALAR_ZERO && y != ML_SCALAR_ZERO);
            return ML_SCALAR_ZERO;
        }
    }
    else if (y == ML_SCALAR_ZERO) {
        if (x > ML_SCALAR_ZERO) {
            return ML_SCALAR_ZERO;
        }
        else if (x < ML_SCALAR_ZERO) {
            return ML_ANGLE_PI;
        }
        else /* x == ML_SCALAR_ZERO */ {
            MLE_ASSERT(x != ML_SCALAR_ZERO && y != ML_SCALAR_ZERO);
            return ML_SCALAR_ZERO;
        }
    }

    // Now not at a pole or zero, so compute the arctan with sign=0
    // and then fix up for sign and invert.

    unsigned long index, remdr, sign, invert;

    atan2TableIndex( y, x, index, remdr, sign, invert );
    long angle = FixedShortTableInterp( arctan2LUT, index, remdr, 0L, REMDR_SHIFT );
    MlScalar ans = mlScalarSetValue( angle );

    if (invert) {
        ans = ML_ANGLE_PI_HALF - ans;
    }

    //
    // Do both of these in order, not with ELSE_IF, to
    // get the right answer in all 4 quadrants.
    //
    if (sign & 0x1) {
        ans = ML_ANGLE_PI - ans;
    }
    if (sign & 0x2) {
        ans = ML_ANGLE_TWO_PI - ans;
    }

    return ans;
} 


//////////////////////////////////////////////////////////////////////////
//  Write out the lookup table for use in fixed point arctan2 computations.
//////////////////////////////////////////////////////////////////////////

#ifdef WRITE_LUT

#include <stdio.h>

// Make sure we do it with the fixed point flag on so that 
// mlScalarGetValue() returns a long.

#undef ML_FIXED_POINT
#define ML_FIXED_POINT 1

#include <math.h>

void writeLUT( int length, int shift )
{
    long *lut = new long[length + 1];
    int i;
    float x;
    MlScalar scalar;
    
    for (i=0; i<=length; i++) {
        if (i == length) {
            lut[i] = mlScalarGetValue(ML_ANGLE_PI_FOURTH);
        }
        else {
            x = atan2f(((float)i) / (float) length, 1.0f);
            scalar = mlRadiansToAngle(mlFloatToScalar(x));
            lut[i] = mlScalarGetValue(scalar);
        }
    }

    printf( "static short arctan2LUT[] = { \n\t" );
    for (i=0; i<length; i++) {
        printf("0x%lx, ", lut[i] >> shift);
        if (lut[i] >= (1<<16)) {
            printf("LUT[%d] entry too long for short.\n", i);
            exit(1);
        }
        if (7 == (i % 8)) {
            printf("\n\t");
        }
    }
    printf("0x%lx", lut[length]>>shift);
    printf( "\n};\n" );

    return;
}

int main ()
{
    printf("#if ML_FIXED_RADIX == %d\n", 16);
    writeLUT( 1024, 16-16 );
    printf("#else\n#if ML_FIXED_RADIX == %d\n", 12);
    writeLUT( 1024, 16-12 );
    printf("#endif\n#endif\n");    

    return 0;
}

#endif

//////////////////////////////////////////////////////////////////////////
//  Test the arctan2 function
//////////////////////////////////////////////////////////////////////////

#ifdef TEST_ARCTAN2

#undef ML_FIXED_POINT
#define ML_FIXED_POINT 1

#undef ML_MATH_DEBUG
#define ML_MATH_DEBUG 1

#include <stdio.h>
#include <math.h>

int main ()
{
    int i, j, k, N;
    float xx, x, tx, ftx;
    float yy, y;
    MlScalar fx, fy, tmp;
    float e;
    float err;
    float xerr, yerr;

    N = 100;
    err = 0.0f;
    printf("Testing %d numbers\n", N);
//  printf(" x,y\t\t\tscalar(x,y)\t\tatan2f(x,y) mlAtan2(x,y)   err\n");

    // Might also want to test that, for i outside the legal range of
    // [-N..N], the arc tan2 function gets the right error assertion.
    
    for (k=0; k<2; k++) {
    for (j=0; j<=20; j++) {
    for (i=-N; i<=N; i++) {
        x = i / (float)N;
        y = (float) (1.0f * (1<<10)) / (1<<j);
        if (k == 0) {
            y = -y;
        }
        fx = mlFloatToScalar(x);
        fy = mlFloatToScalar(y);
        xx = mlScalarToFloat(fx);
        yy = mlScalarToFloat(fy);
        tx = atan2f(yy,xx) / (2.0f * M_PI); // in Magic Lantern angles

        // Adjust to be in the range [0..1].
        if (tx < 0.0) {
            tx += 1.0f;
        }

        tmp = mlAtan2(fy, fx);
        ftx = mlScalarToFloat(tmp);
        e = fabsf(tx-ftx);
//        printf("%9.7f %9.7f %9.7f %9.7f %9.7f %9.7f %9.7f\n", 
//               x, y, xx, yy, tx, ftx, e);
        if (e > err) {
            err = e;
            xerr = x;
            yerr = y;
        }
    }
    }
    }

    if (err != 0.0f || err != 0.0f) {
        printf("Max arctan2([0..2PI]) error of %f at (%f,%f).\n", err, xerr, yerr);
    }
    return 0;
}

#endif

#endif
